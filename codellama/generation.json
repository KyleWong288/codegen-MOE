[
    {
        "task_id": 0,
        "prompt": "\nQUESTION:\nA $\\mathbf{0}$-indexed array $a$ of size $n$ is called good if for all valid indices $i$ ($0 \\le i \\le n-1$), $a_i + i$ is a perfect square$^\\dagger$.\n\nGiven an integer $n$. Find a permutation$^\\ddagger$ $p$ of $[0,1,2,\\ldots,n-1]$ that is good or determine that no such permutation exists.\n\n$^\\dagger$ An integer $x$ is said to be a perfect square if there exists an integer $y$ such that $x = y^2$.\n\n$^\\ddagger$ An array $b$ is a permutation of an array $a$ if $b$ consists of the elements of $a$ in arbitrary order. For example, $[4,2,3,4]$ is a permutation of $[3,2,4,4]$ while $[1,2,2]$ is not a permutation of $[1,2,3]$.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\nThe only line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) \u2014 the length of the permutation $p$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, output $n$ distinct integers $p_0, p_1, \\dots, p_{n-1}$ ($0 \\le p_i \\le n-1$) \u2014 the permutation $p$ \u2014 if the answer exists, and $-1$ otherwise.\n\n\n-----Examples-----\n\nInput\n3\n3\n4\n7\nOutput\n1 0 2 \n0 3 2 1 \n1 0 2 6 5 4 3\n\n\n-----Note-----\n\nIn the first test case, we have $n=3$. The array $p = [1, 0, 2]$ is good since $1 + 0 = 1^2$, $0 + 1 = 1^2$, and $2 + 2 = 2^2$\n\nIn the second test case, we have $n=4$. The array $p = [0, 3, 2, 1]$ is good since $0 + 0 = 0^2$, $3 + 1 = 2^2$, $2+2 = 2^2$, and $1+3 = 2^2$.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    },
    {
        "task_id": 1,
        "prompt": "\nQUESTION:\nKevin has a string S consisting of N lowercase English letters.  \n\nKevin wants to split it into 4 pairwise different non-empty parts.  For example, string \"happynewyear\" can be splitted into \"happy\", \"new\", \"ye\" and \"ar\". He can't delete any characters or change the order of the characters.\n\nHelp Kevin and find if there exist at least one possible spliting.\n\nInput format:\n\nThe first line of input will contain an integer T, denoting the number of test cases. Each of the next T lines contains a string S.\n\nOutput format:\n\nFor every test case output \"YES\" if it is possible to split the string and \"NO\" otherwise.\n\nConstraints:\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 1000\nN \u2264 20 in test data worth 40% of all points\n\nSAMPLE INPUT\n2\nababca\naaabb\n\nSAMPLE OUTPUT\nYES\nNO\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Ideone\n{\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        while(t-- > 0){\n            String s = sc.next();\n            if(s.length()%4 != 0)\n                System.out.println(\"NO\");\n            else{\n                int n = s.length();\n                int[] arr = new int[n];\n                for(int i = 0; i < n; i++){\n                    arr[i] = s.charAt(i);\n                }\n                int cnt = 0;\n                for(int i = 0; i < n; i++){\n                    if(arr[i] == arr[i+1]){\n                        cnt++;\n                        i++;\n                    }\n                }\n                if(cnt == 0)\n                    System.out.println(\"YES\");\n                else\n                    System.out.println(\"NO\");\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 2,
        "prompt": "\nQUESTION:\nComplete the method which accepts an array of integers, and returns one of the following:\n\n* `\"yes, ascending\"` - if the numbers in the array are sorted in an ascending order\n* `\"yes, descending\"` - if the numbers in the array are sorted in a descending order\n* `\"no\"` - otherwise\n\n\nYou can assume the array will always be valid, and there will always be one correct answer.def is_sorted_and_how(arr):\n\t\nUse Call-Based format\nANSWER:\n",
        "output": [
            "\ndef is_sorted_and_how(arr):\n\tif arr == sorted(arr):\n\t\tif arr == sorted(arr, reverse=True):\n\t\t\treturn \"yes, ascending\"\n\t\telse:\n\t\t\treturn \"yes, descending\"\n\telse:\n\t\treturn \"no\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 3,
        "prompt": "\nQUESTION:\nYou are given a string and your task is to swap cases. In other words, convert all lowercase letters to uppercase letters and vice versa.\n\nFor Example:\n\nWww.HackerRank.com \u2192 wWW.hACKERrANK.COM\nPythonist 2 \u2192 pYTHONIST 2  \n\nFunction Description   \n\nComplete the swap_case function in the editor below.   \n\nswap_case has the following parameters:   \n\nstring s: the string to modify   \n\nReturns   \n\nstring: the modified string   \n\nInput Format\n\nA single line containing a string $\\boldsymbol{\\mathrm{~s~}}$.\n\nConstraints\n\n$0<len(s)\\leq1000$\n\nSample Input 0\nHackerRank.com presents \"Pythonist 2\".\n\nSample Output 0\nhACKERrANK.COM PRESENTS \"pYTHONIST 2\".\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the swap_case function below.\ndef swap_case(s):\n    return s.swapcase()\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = swap_case(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 4,
        "prompt": "\nQUESTION:\nThere is a chessboard of size $n$ by $n$. The square in the $i$-th row from top and $j$-th column from the left is labelled $(i,j)$.\n\nCurrently, Gregor has some pawns in the $n$-th row. There are also enemy pawns in the $1$-st row. On one turn, Gregor moves one of his pawns. A pawn can move one square up (from $(i,j)$ to $(i-1,j)$) if there is no pawn in the destination square. Additionally, a pawn can move one square diagonally up (from $(i,j)$ to either $(i-1,j-1)$ or $(i-1,j+1)$) if and only if there is an enemy pawn in that square. The enemy pawn is also removed.\n\nGregor wants to know what is the maximum number of his pawns that can reach row $1$?\n\nNote that only Gregor takes turns in this game, and the enemy pawns never move. Also, when Gregor's pawn reaches row $1$, it is stuck and cannot make any further moves.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1\\le t\\le 2\\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nEach test case consists of three lines. The first line contains a single integer $n$ ($2\\le n\\le 2\\cdot{10}^{5}$) \u2014 the size of the chessboard.\n\nThe second line consists of a string of binary digits of length $n$, where a $1$ in the $i$-th position corresponds to an enemy pawn in the $i$-th cell from the left, and $0$ corresponds to an empty cell.\n\nThe third line consists of a string of binary digits of length $n$, where a $1$ in the $i$-th position corresponds to a Gregor's pawn in the $i$-th cell from the left, and $0$ corresponds to an empty cell.\n\nIt is guaranteed that the sum of $n$ across all test cases is less than $2\\cdot{10}^{5}$.\n\n\n-----Output-----\n\nFor each test case, print one integer: the maximum number of Gregor's pawns which can reach the $1$-st row.\n\n\n-----Examples-----\n\nInput\n4\n3\n000\n111\n4\n1111\n1111\n3\n010\n010\n5\n11001\n00000\nOutput\n3\n4\n0\n0\n\n\n-----Note-----\n\nIn the first example, Gregor can simply advance all $3$ of his pawns forward. Thus, the answer is $3$.\n\nIn the second example, Gregor can guarantee that all $4$ of his pawns reach the enemy row, by following the colored paths as demonstrated in the diagram below. Remember, only Gregor takes turns in this \"game\"!\n\nIn the third example, Gregor's only pawn is stuck behind the enemy pawn, and cannot reach the end.\n\nIn the fourth example, Gregor has no pawns, so the answer is clearly $0$.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    },
    {
        "task_id": 5,
        "prompt": "\nQUESTION:\nCQXYM wants to create a connected undirected graph with $n$ nodes and $m$ edges, and the diameter of the graph must be strictly less than $k-1$. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\n\n-----Input-----\n\nThe input consists of multiple test cases.\n\nThe first line contains an integer $t (1 \\leq t \\leq 10^5)$ \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers $n(1 \\leq n \\leq 10^9)$, $m$, $k$ $(0 \\leq m,k \\leq 10^9)$.\n\n\n-----Output-----\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\n\n-----Examples-----\n\nInput\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\nOutput\nYES\nNO\nYES\nNO\nNO\n\n\n-----Note-----\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    },
    {
        "task_id": 6,
        "prompt": "\nQUESTION:\nYou are given an array $a$ of $n$ integers. Find the number of pairs $(i, j)$ ($1 \\le i < j \\le n$) where the sum of $a_i + a_j$ is greater than or equal to $l$ and less than or equal to $r$ (that is, $l \\le a_i + a_j \\le r$).\n\nFor example, if $n = 3$, $a = [5, 1, 2]$, $l = 4$ and $r = 7$, then two pairs are suitable:\n\n$i=1$ and $j=2$ ($4 \\le 5 + 1 \\le 7$);\n\n$i=1$ and $j=3$ ($4 \\le 5 + 2 \\le 7$).\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$). Then $t$ test cases follow.\n\nThe first line of each test case contains three integers $n, l, r$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le l \\le r \\le 10^9$) \u2014 the length of the array and the limits on the sum in the pair.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ overall test cases does not exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, output a single integer \u2014 the number of index pairs $(i, j)$ ($i < j$), such that $l \\le a_i + a_j \\le r$.\n\n\n-----Examples-----\n\nInput\n4\n3 4 7\n5 1 2\n5 5 8\n5 1 2 4 3\n4 100 1000\n1 1 1 1\n5 9 13\n2 5 5 1 1\nOutput\n2\n7\n0\n1\n\n\n-----Note-----\n\nNone\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\nusing namespace std;\n\nint main() {\n    int t;\n    cin >> t;\n    for (int i = 0; i < t; i++) {\n        int n, l, r;\n        cin >> n >> l >> r;\n        vector<int> a(n);\n        for (int j = 0; j < n; j++) {\n            cin >> a[j];\n        }\n        int ans = 0;\n        for (int j = 0; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (a[j] + a[k] >= l && a[j] + a[k] <= r) {\n                    ans++;\n                }\n            }\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 7,
        "prompt": "\nQUESTION:\nRead problem statements in [Hindi], [Bengali], [Mandarin Chinese], [Russian], and [Vietnamese] as well.\n\nAs a health expert, Vinay is keeping a close watch on the ongoing pandemic of coronavirus disease (COVID-19). He thought of a different situation where there are $26$ types of viruses, named \"aorona\", \"borona\", \"corona\", ..., \"zorona\".\n\nYou are given a string $S$ with length $N$. There are $N$ people (numbered $1$ through $N$) and for each valid $i$, the $i$-th person is infected by exactly one type of virus named $S_{i}$orona (i.e. \"corona\" with the first letter replaced by the $i$-th character of $S$).\n\nYou should answer $Q$ queries. In each query:\nYou are given an integer $C$ denoting the number of available *isolation centers*.\nEach isolation center has an infinite capacity, but with the restriction that two people infected with the same type of virus cannot stay in the same isolation center.\nThere is also a *pending queue* with an infinite capacity and there are no restrictions on which people can be in the pending queue.\nInitially, the isolation centers and pending queue are empty.\nEach of the $N$ people should be placed in either the pending queue or one of the isolation centers.\nSince Vinay is busy finding a vaccine, he asks Swapnil to find a way to place the people in the pending queue and isolation centers such that the number of people in the pending queue is the smallest possible.\nHelp Swapnil find the size of the pending queue in that case.\n\n------  Input ------\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $Q$.\nThe second line contains a single string $S$.\nEach of the following $Q$ lines contains a single integer $C$ describing a query.\n\n------  Output ------\nFor each query, print a single line containing one integer \u2015 the minimum size of the pending queue.\n\n------  Constraints ------\n$1 \u2264 T, N, Q \u2264 10^{5}$\n$0 \u2264 C \u2264 10^{9}$\n$|S| = N$\n$S$ contains only lowercase English letters\nthe sum of $N$ over all test cases does not exceed $10^{5}$\nthe sum of $Q$ over all test cases does not exceed $10^{5}$\n\n------  Subtasks ------\nSubtask #1 (20 points): $T, N, Q, C \u2264 10$\n\nSubtask #2 (80 points): original constraints\n\n----- Sample Input 1 ------ \n1\n\n20 2\n\nstayinghomesaveslife\n\n1\n\n3\n----- Sample Output 1 ------ \n6\n\n0\n----- explanation 1 ------ \nExample case 1: In the pending queue for the first query, there should be $2$ people with \"eorona\", $2$ with \"sorona\", $1$ with \"aorona\" and $1$ with \"iorona\".\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 8,
        "prompt": "\nQUESTION:\nGiven a certain number, how many multiples of three could you obtain with its digits?\n\nSuposse that you have the number 362. The numbers that can be generated from it are:\n```\n362 ----> 3, 6, 2, 36, 63, 62, 26, 32, 23, 236, 263, 326, 362, 623, 632 \n```\nBut only:\n\n```3, 6, 36, 63``` are multiple of three.\n\nWe need a function that can receive a number ann may output in the following order:\n\n- the amount of multiples\n\n- the maximum multiple\n\nLet's see a case the number has a the digit 0 and repeated digits:\n```\n6063 ----> 0, 3, 6, 30, 36, 60, 63, 66, 306, 360, 366, 603, 606, 630, 636, 660, 663, 3066, 3606, 3660, 6036, 6063, 6306, 6360, 6603, 6630\n```\nIn this case the multiples of three will be all except 0\n\n```\n6063 ----> 3, 6, 30, 36, 60, 63, 66, 306, 360, 366, 603, 606, 630, 636, 660, 663, 3066, 3606, 3660, 6036, 6063, 6306, 6360, 6603, 6630\n```\n\nThe cases above for the function:\n```python\nfind_mult_3(362) == [4, 63]\n\nfind_mult_3(6063) == [25, 6630]\n```\nIn Javascript ```findMult_3()```.\nThe function will receive only positive integers (num > 0), and you don't have to worry for validating the entries.\n\nFeatures of the random tests:\n```\nNumber of test = 100\n1000 \u2264 num \u2264 100000000\n```\nEnjoy it!!def find_mult_3(num):\n\t\nUse Call-Based format\nANSWER:\n",
        "output": [
            "\n```python\ndef find_mult_3(num):\n    if num == 0:\n        return 0, 0\n    else:\n        mult_3 = []\n        for i in range(1, num+1):\n            if i % 3 == 0:\n                mult_3.append(i)\n        return len(mult_3), max(mult_3)\n```\n\n```python\ndef find_mult_3(num):\n    if num == 0:\n        return 0, 0\n    else:\n        mult_3 = []\n        for i in range(1, num+1):\n            if i % 3 == 0:\n                mult_3.append(i)\n        return len(mult_3), max(mult_3)\n```\n\n```python\ndef find_mult_3(num):\n    if num == 0:\n        return 0, 0\n    else:\n        mult_3 = []\n        for i in range(1, num+1):\n            if i % 3 == 0:\n                mult_3.append(i)\n        return len(mult_3), max(mult_3)\n```\n\n```python\ndef find_mult_3(num):\n    if num == 0:\n        return 0, 0\n    else:\n        mult_3 = []\n        for i in range(1, num+1):\n            if i % 3 == 0:\n                mult_3.append(i)\n        return len(mult_3), max(mult_3)\n```\n\n```python\ndef find_mult_3(num):\n    if num == 0:\n        return 0, 0\n    else:\n        mult_3 = []\n        for i in range(1, num+1):\n            if i % 3 == 0:\n                mult_3.append(i)\n        return len(mult_3), max(mult_3)\n```\n\n```python\ndef find_mult_3(num):\n    if num == 0:\n        return 0, 0\n    else:\n        mult_3 = []\n        for i in range(1, num+1"
        ]
    },
    {
        "task_id": 9,
        "prompt": "\nQUESTION:\nA company has n employees numbered from 1 to n. Each employee either has no immediate manager or exactly one immediate manager, who is another employee with a different number. An employee A is said to be the superior of another employee B if at least one of the following is true:\n\n  * Employee A is the immediate manager of employee B\n  * Employee B has an immediate manager employee C such that employee A is the superior of employee C. \n\n\n\nThe company will not have a managerial cycle. That is, there will not exist an employee who is the superior of his/her own immediate manager.\n\nToday the company is going to arrange a party. This involves dividing all n employees into several groups: every employee must belong to exactly one group. Furthermore, within any single group, there must not be two employees A and B such that A is the superior of B.\n\nWhat is the minimum number of groups that must be formed?\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 2000) \u2014 the number of employees.\n\nThe next n lines contain the integers pi (1 \u2264 pi \u2264 n or pi = -1). Every pi denotes the immediate manager for the i-th employee. If pi is -1, that means that the i-th employee does not have an immediate manager. \n\nIt is guaranteed, that no employee will be the immediate manager of him/herself (pi \u2260 i). Also, there will be no managerial cycles.\n\nOutput\n\nPrint a single integer denoting the minimum number of groups that will be formed in the party.\n\nExamples\n\nInput\n\n5\n-1\n1\n2\n1\n-1\n\n\nOutput\n\n3\n\nNote\n\nFor the first example, three groups are sufficient, for example: \n\n  * Employee 1 \n  * Employees 2 and 4 \n  * Employees 3 and 5\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <string>\n#include <cstring>\n#include <cmath>\n#include <cstdlib>\n#include <cstdio>\n#include <stack>\n#include <queue>\n#include <cassert>\n#include <utility>\n#include <iomanip>\n#define ll long long\n#define FOR(A, B, C) for (int A = B; A < C; A++)\n#define MAKE_SET(S, x) (S).insert(x)\n#define SET_COUNT(S, x) ((S).find(x) != (S).end())\n#define SET_ADD(S, x) MAKE_SET(S, x)\n#define SET_COUNT(S, x) ((S).find(x) != (S).end())\n#define SET_REMOVE(S, x) ((S).erase(x))\n#define PB push_back\n#define MP make_pair\n#define INF 2000000000\n#define MOD 1000000007\n#define PI 3.1415926535897932384626433832795\n#define clr(x) memset(x, 0, sizeof(x))\n#define sortv(v) sort(v.begin(), v.end())\n#define rev(v) reverse(v.begin(), v.end())\n#define srt(v) sort(v.begin(), v.end())\n#define srt2(v) sort(v.begin(), v.end(), greater<int>())\n#define srt3(v) sort(v.begin(), v.end(), greater<ll>())\n#define srt4(v) sort(v.begin(), v.end(), greater<string>())\n#define srt5(v) sort(v.begin(), v.end(), greater<pair<int, int>>())\n#define min3(a, b, c) min(a,"
        ]
    },
    {
        "task_id": 10,
        "prompt": "\nQUESTION:\nIn Ciel's restaurant, a waiter is training.\nSince the waiter isn't good at arithmetic, sometimes he gives guests wrong change.\nCiel gives him a simple problem.\nWhat is A-B (A minus B) ?\n\nSurprisingly, his answer is wrong.\nTo be more precise, his answer has exactly one wrong digit.\nCan you imagine this?\nCan you make the same mistake in this problem?\n\n------ Input ------ \n\nAn input contains 2 integers A and B.\n\n------ Output ------ \n\nPrint a wrong answer of A-B.\nYour answer must be a positive integer containing the same number of digits as the correct answer, and exactly one digit must differ from the correct answer.\nLeading zeros are not allowed.\nIf there are multiple answers satisfying the above conditions, anyone will do.\n\n------ Constraints ------ \n\n1 \u2264 B < A \u2264 10000\n\n----- Sample Input 1 ------ \n5858 1234\n----- Sample Output 1 ------ \n1624\n----- explanation 1 ------ \n\nThe correct answer of 5858-1234 is 4624.\nSo, for instance, 2624, 4324, 4623, 4604 and 4629 will be accepted, but 0624, 624, 5858, 4624 and 04624 will be rejected.\n\nNotes\n\nThe problem setter is also not good at arithmetic.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    string ans = to_string(a - b);\n    int n = ans.length();\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (ans[i] != to_string(a - b)[i]) {\n            cnt++;\n            if (cnt > 1) {\n                cout << \"0\";\n                return 0;\n            }\n            cout << ans[i];\n        }\n    }\n    if (cnt == 0) {\n        cout << \"0\";\n    }\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 11,
        "prompt": "\nQUESTION:\nUncle Fyodor, Matroskin the Cat and Sharic the Dog live their simple but happy lives in Prostokvashino. Sometimes they receive parcels from Uncle Fyodor\u2019s parents and sometimes from anonymous benefactors, in which case it is hard to determine to which one of them the package has been sent. A photographic rifle is obviously for Sharic who loves hunting and fish is for Matroskin, but for whom was a new video game console meant? Every one of the three friends claimed that the present is for him and nearly quarreled. Uncle Fyodor had an idea how to solve the problem justly: they should suppose that the console was sent to all three of them and play it in turns. Everybody got relieved but then yet another burning problem popped up \u2014 who will play first? This time Matroskin came up with a brilliant solution, suggesting the most fair way to find it out: play rock-paper-scissors together. The rules of the game are very simple. On the count of three every player shows a combination with his hand (or paw). The combination corresponds to one of three things: a rock, scissors or paper. Some of the gestures win over some other ones according to well-known rules: the rock breaks the scissors, the scissors cut the paper, and the paper gets wrapped over the stone. Usually there are two players. Yet there are three friends, that\u2019s why they decided to choose the winner like that: If someone shows the gesture that wins over the other two players, then that player wins. Otherwise, another game round is required. Write a program that will determine the winner by the gestures they have shown.\n\nInput\n\nThe first input line contains the name of the gesture that Uncle Fyodor showed, the second line shows which gesture Matroskin showed and the third line shows Sharic\u2019s gesture. \n\nOutput\n\nPrint \"F\" (without quotes) if Uncle Fyodor wins. Print \"M\" if Matroskin wins and \"S\" if Sharic wins. If it is impossible to find the winner, print \"?\".\n\nExamples\n\nInput\n\nrock\nrock\nrock\n\n\nOutput\n\n?\n\n\nInput\n\npaper\nrock\nrock\n\n\nOutput\n\nF\n\n\nInput\n\nscissors\nrock\nrock\n\n\nOutput\n\n?\n\n\nInput\n\nscissors\npaper\nrock\n\n\nOutput\n\n?\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String uf = sc.nextLine();\n        String m = sc.nextLine();\n        String s = sc.nextLine();\n        if (uf.equals(m) && uf.equals(s)) {\n            System.out.println(\"?\");\n        } else if (uf.equals(m) && uf.equals(\"rock\")) {\n            System.out.println(\"F\");\n        } else if (uf.equals(m) && uf.equals(\"scissors\")) {\n            System.out.println(\"S\");\n        } else if (uf.equals(m) && uf.equals(\"paper\")) {\n            System.out.println(\"M\");\n        } else if (uf.equals(s) && uf.equals(\"rock\")) {\n            System.out.println(\"S\");\n        } else if (uf.equals(s) && uf.equals(\"scissors\")) {\n            System.out.println(\"F\");\n        } else if (uf.equals(s) && uf.equals(\"paper\")) {\n            System.out.println(\"M\");\n        } else if (uf.equals(\"rock\") && m.equals(\"rock\")) {\n            System.out.println(\"?\");\n        } else if (uf.equals(\"rock\") && m.equals(\"scissors\")) {\n            System.out.println(\"F\");\n        } else if (uf.equals(\"rock\") && m.equals(\"paper\")) {\n            System.out.println(\"S\");\n        } else if (uf.equals(\"scissors\") && m.equals(\"rock\")) {\n            System.out.println(\"S\");\n        } else if (uf.equals(\"scissors\") && m.equals(\"scissors\")) {\n            System.out.println(\"?\");\n        } else if (uf.equals(\"scissors\") && m.equals(\"paper\")) {\n            System.out.println(\"F\");\n        } else if (uf.equals(\"paper\") && m.equals(\"rock\")) {\n            System.out.println(\"M\");\n       "
        ]
    },
    {
        "task_id": 12,
        "prompt": "\nQUESTION:\nLet us define two functions f and g on positive integer numbers.  $f(n) = \\text{product of non-zero digits of} n$\n\n$g(n) = \\left\\{\\begin{array}{ll}{n} & {\\text{if} n < 10} \\\\{g(f(n))} & {\\text{otherwise}} \\end{array} \\right.$ \n\nYou need to process Q queries. In each query, you will be given three integers l, r and k. You need to print the number of integers x between l and r inclusive, such that g(x) = k. \n\n\n-----Input-----\n\nThe first line of the input contains an integer Q (1 \u2264 Q \u2264 2 \u00d7 10^5) representing the number of queries. \n\nQ lines follow, each of which contains 3 integers l, r and k (1 \u2264 l \u2264 r \u2264 10^6, 1 \u2264 k \u2264 9).\n\n\n-----Output-----\n\nFor each query, print a single line containing the answer for that query.\n\n\n-----Examples-----\nInput\n4\n22 73 9\n45 64 6\n47 55 7\n2 62 4\n\nOutput\n1\n4\n0\n8\n\nInput\n4\n82 94 6\n56 67 4\n28 59 9\n39 74 4\n\nOutput\n3\n1\n1\n5\n\n\n\n-----Note-----\n\nIn the first example:  g(33) = 9 as g(33) = g(3 \u00d7 3) = g(9) = 9  g(47) = g(48) = g(60) = g(61) = 6  There are no such integers between 47 and 55.  g(4) = g(14) = g(22) = g(27) = g(39) = g(40) = g(41) = g(58) = 4\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 13,
        "prompt": "\nQUESTION:\nThe girl named Masha was walking in the forest and found a complete binary tree of height $n$ and a permutation $p$ of length $m=2^n$.\n\nA complete binary tree of height $n$ is a rooted tree such that every vertex except the leaves has exactly two sons, and the length of the path from the root to any of the leaves is $n$. The picture below shows the complete binary tree for $n=2$.\n\nA permutation is an array consisting of $n$ different integers from $1$ to $n$. For example, [$2,3,1,5,4$] is a permutation, but [$1,2,2$] is not ($2$ occurs twice), and [$1,3,4$] is also not a permutation ($n=3$, but there is $4$ in the array).\n\nLet's enumerate $m$ leaves of this tree from left to right. The leaf with the number $i$ contains the value $p_i$ ($1 \\le i \\le m$).\n\nFor example, if $n = 2$, $p = [3, 1, 4, 2]$, the tree will look like this:\n\nMasha considers a tree beautiful if the values in its leaves are ordered from left to right in increasing order.\n\nIn one operation, Masha can choose any non-leaf vertex of the tree and swap its left and right sons (along with their subtrees).\n\nFor example, if Masha applies this operation to the root of the tree discussed above, it will take the following form:\n\nHelp Masha understand if she can make a tree beautiful in a certain number of operations. If she can, then output the minimum number of operations to make the tree beautiful.\n\n\n-----Input-----\n\nThe first line contains single integer $t$ ($1 \\le t \\le 10^4$) \u2014 number of test cases.\n\nIn each test case, the first line contains an integer $m$ ($1 \\le m \\le 262144$), which is a power of two  \u2014 the size of the permutation $p$.\n\nThe second line contains $m$ integers: $p_1, p_2, \\dots, p_m$ ($1 \\le p_i \\le m$) \u2014 the permutation $p$.\n\nIt is guaranteed that the sum of $m$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case in a separate line, print the minimum possible number of operations for which Masha will be able to make the tree beautiful or -1, if this is not possible.\n\n\n-----Examples-----\n\nInput\n4\n8\n6 5 7 8 4 3 1 2\n4\n3 1 4 2\n1\n1\n8\n7 8 4 3 1 2 6 5\nOutput\n4\n-1\n0\n-1\n\n\n-----Note-----\n\nConsider the first test.\n\nIn the first test case, you can act like this (the vertex to which the operation is applied at the current step is highlighted in purple):\n\nIt can be shown that it is impossible to make a tree beautiful in fewer operations.\n\nIn the second test case, it can be shown that it is impossible to make a tree beautiful.\n\nIn the third test case, the tree is already beautiful.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    },
    {
        "task_id": 14,
        "prompt": "\nQUESTION:\nArgus was charged with guarding Io, which is not an ordinary cow. Io is quite an explorer, and she wanders off rather frequently, making Argus' life stressful. So the cowherd decided to construct an enclosed pasture for Io.\n\nThere are $n$ trees growing along the river, where Argus tends Io. For this problem, the river can be viewed as the $OX$ axis of the Cartesian coordinate system, and the $n$ trees as points with the $y$-coordinate equal $0$. There is also another tree growing in the point $(0, 1)$.\n\nArgus will tie a rope around three of the trees, creating a triangular pasture. Its exact shape doesn't matter to Io, but its area is crucial to her. There may be many ways for Argus to arrange the fence, but only the ones which result in different areas of the pasture are interesting for Io. Calculate the number of different areas that her pasture may have. Note that the pasture must have nonzero area.\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1 \\leq t \\leq 100$) \u2014 the number of test cases. Then $t$ test cases follow, each one is described in two lines.\n\nIn the first line of each test case there is a single integer $n$ ($1 \\leq n \\leq 50$) denoting the number of trees growing along the river. Next line contains $n$ distinct integers $x_1 < x_2 < \\ldots < x_{n - 1} < x_n$ ($1 \\leq x_i \\leq 50$), the $x$-coordinates of trees growing along the river.\n\n\n-----Output-----\n\nIn a single line output an integer, the number of different nonzero areas that triangles with trees as vertices may have.\n\n\n-----Examples-----\n\nInput\n8\n4\n1 2 4 5\n3\n1 3 5\n3\n2 6 8\n2\n1 2\n1\n50\n5\n3 4 5 6 8\n3\n1 25 26\n6\n1 2 4 8 16 32\nOutput\n4\n2\n3\n1\n0\n5\n3\n15\n\n\n-----Note-----\n\nIn the first test case, we have $6$ non-degenerate triangles with the following areas: $0.5$, $0.5$, $1$, $1.5$, $1.5$ and $2$. The pasture can have $4$ different areas, and thus $4$ is the answer.\n\nIn the second test case, we have $3$ non-degenerate triangles with the following areas: $1$, $1$ and $2$. The pasture can have $2$ different areas, so $2$ is the answer.\n\nThe following two drawings present the situation in the second test case. The blue triangles in the first drawing have area $1$. The red triangle in the second drawing has area $2$.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    },
    {
        "task_id": 15,
        "prompt": "\nQUESTION:\nWe have the integer `9457`. \n\nWe distribute its digits in two buckets having the following possible distributions (we put the generated numbers as strings and we add the corresponding formed integers for each partition):\n```\n- one bucket with one digit and the other with three digits \n[['9'], ['4','5','7']] --> ['9','457'] --> 9 + 457 = 466\n[['9','5','7'], ['4']] --> ['957','4'] --> 957 + 4 = 961\n[['9','4','7'], ['5']] --> ['947','5'] --> 947 + 5 = 952\n[['9','4','5'], ['7']] --> ['945','7'] --> 945 + 7 = 952\n\n- two buckets with 2 digits each:\n[['9','4'], ['5','7']] --> ['94','57'] --> 94 + 57 = 151\n[['9','5'], ['4','7']] --> ['95','47'] --> 95 + 47 = 142\n[['9','7'], ['4','5']] --> ['97','45'] --> 97 + 45 = 142\n```\n\nNow we distribute the digits of that integer in three buckets, and we do the same presentation as above:\n```\none bucket of two digits and two buckets with one digit each:\n[['9'], ['4'], ['5','7']] --> ['9','4','57'] --> 9 + 4 + 57 = 70\n[['9','4'], ['5'], ['7']] --> ['94','5','7'] --> 94 + 5 + 7 = 106\n[['9'], ['4', '5'], ['7']] --> ['9','45','7'] --> 9 + 45 + 7 = 61\n[['9'], ['5'], ['4','7']] --> ['9','5','47'] --> 9 + 5 + 47 = 61\n[['9','5'], ['4'], ['7']] --> ['95','4','7'] --> 95 + 4 + 7 = 106\n[['9','7'], ['4'], ['5']] --> ['97','4','5'] --> 97 + 4 + 5 = 106\n```\nFinally we distribute the digits in the maximum possible amount of buckets for this integer, four buckets, with an unique distribution:\n```\nOne digit in each bucket.\n[['9'], ['4'], ['5'], ['7']] --> ['9','4','5','7'] --> 9 + 4 + 5 + 7 = 25\n```\nIn the distribution we can observe the following aspects:\n\n- the order of the buckets does not matter\n\n- the order of the digits in each bucket matters; the available digits have the same order than in the original number.\n\n- the amount of buckets varies from two up to the amount of digits\n\nThe function, `f =` `bucket_digit_distributions_total_sum`, gives for each integer, the result of the big sum of the total addition of generated numbers for each distribution of digits.\n```python\nbucket_digit_distributions_total_sum(9457) === 4301 # 466 + 961 + 952 + 952 + 151 + 142 + 142 + 70 + 106 + 61 + 61 + 106 + 106 + 25 = 4301\n```\nIt is interesting to see the value of this function for a number that has one or more zeroes as digits, for example:\n```python\nbucket_digit_distributions_total_sum(10001) === 5466\n```\nGiven an integer `n`, with its corresponding value of the above function, `f(n)`, and another integer `z`, find the closest and higher integer to n, `nf`, such `f(nf) > f(n) + z`.\n\nExample:\n```python\nfind(10001,100) === 10003\nfind(30000, 1000) === 30046\n``` \nFeatures of the random tests:\n```\n100 <= n <= 1500000\n50 <= z <= 6000\n```def find(n,z):\n\t\nUse Call-Based format\nANSWER:\n",
        "output": [
            "\n```python\ndef find(n,z):\n    # your code here\n    return n + z\n```\n\n### 1.2.0\n"
        ]
    },
    {
        "task_id": 16,
        "prompt": "\nQUESTION:\nAs a programmer, you sometimes have to deal with some math and this is the time to do it. You are given a list of binary relations, equalities and inequalities, like a = b, a != d, b = c etc. Your task is to output YES if you can assign integers to input variables in such a way, that you can satisfy all equalities and inequalities. Otherwise you should output NO. \n\nInput format:\n\nIn the first line there is one integer T denoting the number of test cases. Description of T test cases follow. Each one have two integers N and K given in the first line denoting the number of variables and the number of relations between them for this test case. All variables are represented by integers in range [1, N]. K lines follow. Each of them is of the form \"x1 R x2\" where x1 and x2 are integers representing variables and R is either \"=\" or \"!=\" and denotes the kind of relation between these variables.\n\nOutput format:\n\nOutput exactly T lines. In i-th of them, output the answer to the i-th test case.\n\nConstraints:\n\nT \u2264 10\n1 \u2264 N, K \u2264 10^6\n\nSum of N in one test file does not exceed 10^6\nSum of K in one test file does not exceed 10^6\n\nSAMPLE INPUT\n2\n2 2\n1 = 2\n1 != 2\n3 2\n1 = 2\n2 != 3\n\nSAMPLE OUTPUT\nNO\nYES\n\nExplanation\n\nThere are 2 test cases. In the first one, you cannot fulfill all relations, because equality and inequality of two number cannot be both true. In the second one,  you can for example assign 10 to 1 and 2 and 20 to 3 in order to fulfill all relations.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <cstdlib>\n#include <cassert>\n#include <stack>\n#include <queue>\n#include <iomanip>\n#include <sstream>\n#include <numeric>\n#include <functional>\n#include <climits>\n#include <iterator>\n#include <bitset>\n#include <cctype>\n#include <ctime>\n#include <cstdlib>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <unordered_set>\n#include <list>\n#include <forward_list>\n#include <deque>\n#include <numeric>\n#include <stack>\n#include <tuple>\n#include <utility>\n#include <iterator>\n#include <cmath>\n#include <complex>\n#include <string>\n#include <cstdlib>\n#include <cstdio>\n#include <cstring>\n#include <cassert>\n#include <algorithm>\n#include <vector>\n#include <functional>\n#include <numeric>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <unordered_set>\n#include <list>\n#include <forward_list>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <tuple>\n#include <utility>\n#include <iterator>\n#include <cmath>\n#include <complex>\n#include <string>\n#include <cstdlib>\n#include <cstdio>\n#include <cstring>\n#include <cassert>\n#include <algorithm>\n#include <vector>\n#include <functional>\n#include <numeric>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <unordered_set>\n#include"
        ]
    },
    {
        "task_id": 17,
        "prompt": "\nQUESTION:\nRahul and Tina are looking forward to starting their new year at college. As they enter their new classroom, they observe the seats of students are arranged in a $n \\times m$ grid. The seat in row $r$ and column $c$ is denoted by $(r, c)$, and the distance between two seats $(a,b)$ and $(c,d)$ is $|a-c| + |b-d|$.\n\nAs the class president, Tina has access to exactly $k$ buckets of pink paint. The following process occurs.\n\nFirst, Tina chooses exactly $k$ seats in the classroom to paint with pink paint. One bucket of paint can paint exactly one seat.\n\nAfter Tina has painted $k$ seats in the previous step, Rahul chooses where he sits. He will not choose a seat that has been painted pink due to his hatred of the colour pink.\n\nAfter Rahul has chosen his seat, Tina chooses a seat for herself. She can choose any of the seats, painted or not, other than the one chosen by Rahul.\n\nRahul wants to choose a seat such that he sits as close to Tina as possible. However, Tina wants to sit as far away from Rahul as possible due to some complicated relationship history that we couldn't fit into the statement!\n\nNow, Rahul wonders for $k = 0, 1, \\dots, n \\cdot m - 1$, if Tina has $k$ buckets of paint, how close can Rahul sit to Tina, if both Rahul and Tina are aware of each other's intentions and they both act as strategically as possible? Please help satisfy Rahul's curiosity!\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1 \\leq t \\leq 5 \\cdot 10^4$) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$, $m$ ($2 \\leq n \\cdot m \\leq 10^5$) \u2014 the number of rows and columns of seats in the classroom.\n\nThe sum of $n \\cdot m$ across all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, output $n \\cdot m$ ordered integers \u2014 the distance between Rahul and Tina if both of them act optimally for every $k \\in [0, n \\cdot m - 1]$.\n\n\n-----Examples-----\n\nInput\n2\n4 3\n1 2\nOutput\n3 3 4 4 4 4 4 4 5 5 5 5 \n1 1\n\n\n-----Note-----\n\nOne possible sequence of choices for the first testcase where Tina has $k=3$ buckets of paints is as follows.\n\nTina paints the seats at positions $(1, 2)$, $(2, 2)$, $(3, 2)$ with pink paint. Rahul chooses the seat at $(3, 1)$ after which Tina chooses to sit at $(1, 3)$.\n\nTherefore, the distance between Tina and Rahul is $|3-1| + |1-3| = 4$, and we can prove that this is indeed the minimum possible distance under the given constraints. There may be other choices of seats which lead to the same answer as well.\n\nFor $k=0$ in the first test case, Rahul can decide to sit at $(2, 2)$ and Tina can decide to sit at $(4, 3)$ so the distance between them would be $|2 - 4| + |2 - 3| = 3$.\n\nBelow are pictorial representations of the $k=3$ and $k=0$ cases for the first test case.\n\nA possible seating arrangement for $k=3$.\n\nA possible seating arrangement for $k=0$.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    },
    {
        "task_id": 18,
        "prompt": "\nQUESTION:\nSlavic has an array of length $n$ consisting only of zeroes and ones. In one operation, he removes either the first or the last element of the array.\n\nWhat is the minimum number of operations Slavic has to perform such that the total sum of the array is equal to $s$ after performing all the operations? In case the sum $s$ can't be obtained after any amount of operations, you should output -1.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $s$ ($1 \\leq n, s \\leq 2 \\cdot 10^5$) \u2014 the length of the array and the needed sum of elements.\n\nThe second line of each test case contains $n$ integers $a_i$ ($0 \\leq a_i \\leq 1$) \u2014 the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, output a single integer \u2014 the minimum amount of operations required to have the total sum of the array equal to $s$, or -1 if obtaining an array with sum $s$ isn't possible.\n\n\n-----Examples-----\n\nInput\n7\n3 1\n1 0 0\n3 1\n1 1 0\n9 3\n0 1 0 1 1 1 0 0 1\n6 4\n1 1 1 1 1 1\n5 1\n0 0 1 1 0\n16 2\n1 1 0 0 1 0 0 1 1 0 0 0 0 0 1 1\n6 3\n1 0 1 0 0 0\nOutput\n0\n1\n3\n2\n2\n7\n-1\n\n\n-----Note-----\n\nIn the first test case, the sum of the whole array is $1$ from the beginning, so we don't have to make any operations.\n\nIn the second test case, the sum of the array is $2$ and we want it to be equal to $1$, so we should remove the first element. The array turns into $[1, 0]$, which has a sum equal to $1$.\n\nIn the third test case, the sum of the array is $5$ and we need it to be $3$. We can obtain such a sum by removing the first two elements and the last element, doing a total of three operations. The array turns into $[0, 1, 1, 1, 0, 0]$, which has a sum equal to $3$.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int t;\n    cin >> t;\n    while (t--) {\n        int n, s;\n        cin >> n >> s;\n        vector<int> a(n);\n        for (int i = 0; i < n; i++) {\n            cin >> a[i];\n        }\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n        }\n        if (sum == s) {\n            cout << 0 << endl;\n            continue;\n        }\n        if (sum > s) {\n            cout << -1 << endl;\n            continue;\n        }\n        int ans = 0;\n        int i = 0;\n        int j = n - 1;\n        while (i <= j) {\n            if (sum + a[i] + a[j] == s) {\n                ans++;\n                i++;\n                j--;\n            } else if (sum + a[i] + a[j] > s) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 19,
        "prompt": "\nQUESTION:\nGudi, a fun loving girl from the city of Dun, travels to Azkahar - a strange land beyond the mountains. She arrives at the gates of Castle Grey, owned by Puchi,the lord of Azkahar to claim the treasure that it guards.  However, destiny has other plans for her as she has to move through floors, crossing obstacles on her way to reach the treasure.\nThe gates of the castle are closed. An integer N is engraved on the gates. A writing on the wall says \nTap the gates as many times as there are unordered pairs of distinct integers from 1 to N whose bit-wise XOR does not exceed N.\n\nHelp her find the number of the times she has to tap.\n\nInput:\nFirst line contains an integer T, T testcases follow.\nEach testcase consists of an integer N.  \n\nOutput:\nPrint the answer to each testcase in a newline.  \n\nConstraints:\n 1 \u2264 T \u2264 100\n 2 \u2264 N \u2264 2000  \n\nSAMPLE INPUT\n3\n4\n6\n8\n\nSAMPLE OUTPUT\n3\n12\n21\n\nExplanation\n\nFor N=4,  pairs are (1,2) , (1,3) and (2,3)\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int t;\n    cin>>t;\n    while(t--)\n    {\n        int n;\n        cin>>n;\n        int ans=0;\n        for(int i=1;i<=n;i++)\n        {\n            for(int j=i+1;j<=n;j++)\n            {\n                if(__builtin_popcount(i^j)<=n)\n                {\n                    ans++;\n                }\n            }\n        }\n        cout<<ans<<endl;\n    }\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 20,
        "prompt": "\nQUESTION:\nYou are given an array $a_1, a_2, \\ldots, a_n$ consisting of $n$ positive integers and a positive integer $m$.\n\nYou should divide elements of this array into some arrays. You can order the elements in the new arrays as you want.\n\nLet's call an array $m$-divisible if for each two adjacent numbers in the array (two numbers on the positions $i$ and $i+1$ are called adjacent for each $i$) their sum is divisible by $m$. An array of one element is $m$-divisible.\n\nFind the smallest number of $m$-divisible arrays that $a_1, a_2, \\ldots, a_n$ is possible to divide into.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\le t \\le 1000)$  \u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$, $m$ $(1 \\le n \\le 10^5, 1 \\le m \\le 10^5)$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ $(1 \\le a_i \\le 10^9)$.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test cases do not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print the answer to the problem.\n\n\n-----Examples-----\n\nInput\n4\n6 4\n2 2 8 6 9 4\n10 8\n1 1 1 5 2 4 4 8 6 7\n1 1\n666\n2 2\n2 4\nOutput\n3\n6\n1\n1\n\n\n-----Note-----\n\nIn the first test case we can divide the elements as follows:\n\n$[4, 8]$. It is a $4$-divisible array because $4+8$ is divisible by $4$.\n\n$[2, 6, 2]$. It is a $4$-divisible array because $2+6$ and $6+2$ are divisible by $4$.\n\n$[9]$. It is a $4$-divisible array because it consists of one element.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    },
    {
        "task_id": 21,
        "prompt": "\nQUESTION:\nWrite a program to find the mode of a given list of integers. Mode of a number is defined as the number which is most frequently occured. \nFor example: \nL = {1,2,2,3} // Here mode is 2(most frequently occured)  \n\nIt is possible that multiple answers are possible for a list. In that case print all possible answers in non-increasing order.\n\nInput:\nFirst Line of input contains an integer t represeting the number of test cases, Where first line of each test case has an integers N - number of integers in list, Next line contains N integers.\n\nOutput:\nprint all the possible modes in non-increasing order.\n\nConstraints:\n1 \u2264 t \u2264 100\n1 \u2264 N<100000\n1 \u2264 a[i] \u2264 1000000\n\nSAMPLE INPUT\n2\n5\n1 2 2 2 2 \n6\n1 2 2 3 3 4\n\nSAMPLE OUTPUT\n2 \n3 2\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint n;\n\t\tcin >> n;\n\t\tvector<int> a(n);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcin >> a[i];\n\t\t}\n\t\tsort(a.begin(), a.end());\n\t\tint max_count = 1;\n\t\tint mode = a[0];\n\t\tint count = 1;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tif (a[i] == a[i - 1]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (count > max_count) {\n\t\t\t\t\tmax_count = count;\n\t\t\t\t\tmode = a[i - 1];\n\t\t\t\t}\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t}\n\t\tif (count > max_count) {\n\t\t\tmax_count = count;\n\t\t\tmode = a[n - 1];\n\t\t}\n\t\tcout << mode;\n\t\tfor (int i = 1; i < max_count; i++) {\n\t\t\tcout << \" \" << mode;\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 22,
        "prompt": "\nQUESTION:\nMonk is standing at the door of his classroom. There are currently N students in the class, i'th student got Ai candies.\nThere are still M more students to come. At every instant, a student enters the class and wishes to be seated with a student who has exactly the same number of candies. For each student, Monk shouts YES if such a student is found, NO otherwise.\n\nInput:\nFirst line contains an integer T. T test cases follow.\nFirst line of each case contains two space-separated integers N and M.\nSecond line contains N + M space-separated integers, the candies of the students.  \n\nOutput:\nFor each test case, output M new line, Monk's answer to the M students.\nPrint \"YES\" (without the quotes) or \"NO\" (without the quotes) pertaining to the Monk's answer.\n\nConstraints:\n1 \u2264 T \u2264 10\n1 \u2264 N, M \u2264 10^5 \n0 \u2264 Ai \u2264 10^12\n\nSAMPLE INPUT\n1\n2 3\n3 2 9 11 2\n\nSAMPLE OUTPUT\nNO\nNO\nYES\n\nExplanation\n\nInitially students with 3 and 2 candies are in the class.\nA student with 9 candies enters, No student with 9 candies in class. Hence, \"NO\"\nA student with 11 candies enters, No student with 11 candies in class. Hence, \"NO\"\nA student with 2 candies enters, Student with 2 candies found in class. Hence, \"YES\"\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int t;\n    cin>>t;\n    while(t--)\n    {\n        int n,m;\n        cin>>n>>m;\n        int a[n+m];\n        for(int i=0;i<n+m;i++)\n        {\n            cin>>a[i];\n        }\n        sort(a,a+n+m);\n        int i=0,j=n-1;\n        while(i<j)\n        {\n            if(a[i]==a[j])\n            {\n                cout<<\"YES\"<<endl;\n                i++;\n                j--;\n            }\n            else if(a[i]<a[j])\n            {\n                cout<<\"NO\"<<endl;\n                i++;\n            }\n            else\n            {\n                cout<<\"NO\"<<endl;\n                j--;\n            }\n        }\n        if(i==j)\n        {\n            if(a[i]==a[j])\n            {\n                cout<<\"YES\"<<endl;\n            }\n            else\n            {\n                cout<<\"NO\"<<endl;\n            }\n        }\n    }\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 23,
        "prompt": "\nQUESTION:\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well. \n\nDonald Drumpf has spent the entire summer lobbying to gather votes for the upcoming student government election. At his University, there are a total of N students. Each student in the university casts a vote. The size of student government is determined by the number of students that get at least K votes.\n\nEach person that receives at least K votes is given a post in the student government. The Dean noticed that every year, there are a few students who vote for themselves. He decided to add a rule to disqualify any such individuals who vote for themselves i.e they cannot be part of the student government. \n\nYou are given an array A, where A_{i} denotes the person who the i-th person voted for. Can you compute the size of the student government?\n \n------ Input ------ \n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nFor each test case, first line consists of two space separated integers N, K.\nSecond line consists of N space separated integers denoting the array A,  where i-th integer denotes A_{i}.\n\n------ Output ------ \n\nFor each test case, output a single line containing an integer corresponding to the size of the student government.\n\n------ Constraints ------ \n\n$1 \u2264 T \u2264 100$\n$1 \u2264 K \u2264 N$\n$1 \u2264 A_{i} \u2264 N$\n\n------ Subtasks ------ \n\nSubtask #1: (30 points)\n$1 \u2264 N \u2264 3$\nSubtask #2: (70 points)\n$1 \u2264 N \u2264 100$\n\n----- Sample Input 1 ------ \n2\n3 2\n2 1 2\n2 1\n1 2\n----- Sample Output 1 ------ \n1\n0\n----- explanation 1 ------ \n\nIn first test case, there are 3 students. A student must receive at least 2\nvotes to be part of the student government. Student 1 votes for student 2, student 2 votes for student 1 and student 3 votes for student 2. Thus, Student 2 receives 2 votes and is the only one eligible for student government.\n\nIn second test case, although both students receive the required amount of votes, they are both disqualified as they had voted for themselves. Thus, size of the student\ngovernment is 0.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <cmath>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <cstring>\n#include <cstdio>\n#include <stack>\n#include <queue>\n#include <cassert>\n#include <cctype>\n#include <numeric>\n#include <bitset>\n#include <cstdlib>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\n\ntypedef vector<int> vi;\ntypedef vector<long long> vll;\ntypedef vector<double> vd;\ntypedef vector<vi> vvi;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\n\n#define pb push_back\n#define mp make_pair\n#define f first\n#define s second\n#define sz(x) (int)x.size()\n#define all(x) begin(x), end(x)\n#define rall(x) (x).rbegin(), (x).rend()\n#define tr(it, x) for(auto it = x.begin(); it != x.end(); it++)\n#define trr(it, x) for(auto it = x.rbegin(); it != x.rend(); it++)\n#define PI 3.141592653589793238462\n\nconst int MAX_N = 1e5 + 10;\nconst int MOD = 1e9 + 7;\nconst ll LINF = 1e18;\nconst ld EPS = 1e-9;\n\n\n\nint main(){\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    cout.tie(NULL);\n    int t;\n    cin >> t;\n    while(t--){\n        int n, k;\n        cin >> n >> k;\n        vi a(n);\n        for("
        ]
    },
    {
        "task_id": 24,
        "prompt": "\nQUESTION:\nSimilar setting of the [previous](https://www.codewars.com/kata/progressive-spiral-number-position/), this time you are called to identify in which \"branch\" of the spiral a given number will end up.\n\nConsidering a square of numbers disposed as the 25 items in [the previous kata](https://www.codewars.com/kata/progressive-spiral-number-position/), the branch are numbered as it follows:\n\n```\n17 16 15 14 13    1 1 1 1 0\n18 05 04 03 12    2 1 1 0 0\n19 06 01 02 11 => 2 2 0 0 0\n20 07 08 09 10    2 2 3 3 0\n21 22 23 24 25    2 3 3 3 3\n```\n\nMeaning that, for example, numbers in the `10-13` range will be in branch `0`, numbers in the range `14-17` are inside branch `1`, all those nice numbers in the `18-21` can call branch `2` their house and finally the `21-25` team all falls under the `3` branch.\n\nYour function must return the number of the index of each number [`1` being a special case you might consider equivalent to being in the first branch, `0`], as per examples:\n\n```python\nbranch(1) == 0 #kind of special case here\nbranch(5) == 1\nbranch(25) == 3\nbranch(30) == 0\nbranch(50) == 0\n```\n\nIt might help A LOT to both solve the [previous kata](https://www.codewars.com/kata/progressive-spiral-number-position/) and to visualize the diagonals of the square. Be ready for big numbers and, as usual, inspired by [AoC](http://adventofcode.com/2017/day/3). Finally, when ready, go to compute [the distance](https://www.codewars.com/kata/progressive-spiral-number-distance/) of the series.def branch(n):\n\t\nUse Call-Based format\nANSWER:\n",
        "output": [
            "\n```python\ndef branch(n):\n    if n == 1:\n        return 0\n    if n < 10:\n        return 1\n    if n < 20:\n        return 2\n    if n < 30:\n        return 3\n    if n < 40:\n        return 4\n    if n < 50:\n        return 5\n    if n < 60:\n        return 6\n    if n < 70:\n        return 7\n    if n < 80:\n        return 8\n    if n < 90:\n        return 9\n    if n < 100:\n        return 10\n    if n < 110:\n        return 11\n    if n < 120:\n        return 12\n    if n < 130:\n        return 13\n    if n < 140:\n        return 14\n    if n < 150:\n        return 15\n    if n < 160:\n        return 16\n    if n < 170:\n        return 17\n    if n < 180:\n        return 18\n    if n < 190:\n        return 19\n    if n < 200:\n        return 20\n    if n < 210:\n        return 21\n    if n < 220:\n        return 22\n    if n < 230:\n        return 23\n    if n < 240:\n        return 24\n    if n < 250:\n        return 25\n    if n < 260:\n        return 26\n    if n < 270:\n        return 27\n    if n < 280:\n        return 28\n    if n < 290:\n        return 29\n    if n < 300:\n        return 30\n    if n < 310:\n        return 31\n    if n < 320:\n       "
        ]
    },
    {
        "task_id": 25,
        "prompt": "\nQUESTION:\nAlice and Bob are playing a game on an array $a$ of $n$ positive integers. Alice and Bob make alternating moves with Alice going first.\n\nIn his/her turn, the player makes the following move:\n\nIf $a_1 = 0$, the player loses the game, otherwise:\n\nPlayer chooses some $i$ with $2\\le i \\le n$. Then player decreases the value of $a_1$ by $1$ and swaps $a_1$ with $a_i$.\n\nDetermine the winner of the game if both players play optimally.\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains a single integer $t$ $(1 \\leq t \\leq 2 \\cdot 10^4)$  \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ $(2 \\leq n \\leq 10^5)$  \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1,a_2 \\ldots a_n$ $(1 \\leq a_i \\leq 10^9)$  \u2014 the elements of the array $a$.\n\nIt is guaranteed that sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, if Alice will win the game, output \"Alice\". Otherwise, output \"Bob\".\n\nYou can output each letter in any case. For example, \"alIcE\", \"Alice\", \"alice\" will all be considered identical.\n\n\n-----Examples-----\n\nInput\n3\n2\n1 1\n2\n2 1\n3\n5 4 4\nOutput\nBob\nAlice\nAlice\n\n\n-----Note-----\n\nIn the first testcase, in her turn, Alice can only choose $i = 2$, making the array equal $[1, 0]$. Then Bob, in his turn, will also choose $i = 2$ and make the array equal $[0, 0]$. As $a_1 = 0$, Alice loses.\n\nIn the second testcase, once again, players can only choose $i = 2$. Then the array will change as follows: $[2, 1] \\to [1, 1] \\to [1, 0] \\to [0, 0]$, and Bob loses.\n\nIn the third testcase, we can show that Alice has a winning strategy.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    },
    {
        "task_id": 26,
        "prompt": "\nQUESTION:\nFor this game of `BINGO`, you will receive a single array of 10 numbers from 1 to 26 as an input. Duplicate numbers within the array are possible.\n\nEach number corresponds to their alphabetical order letter (e.g. 1 = A. 2 = B, etc). Write a function where you will win the game if your numbers can spell `\"BINGO\"`. They do not need to be in the right order in the input array). Otherwise you will lose. Your outputs should be `\"WIN\"` or `\"LOSE\"` respectively.def bingo(array):\n\t\nUse Call-Based format\nANSWER:\n",
        "output": [
            "\n```python\ndef bingo(array):\n    # Write your code here\n    if \"BINGO\" in \"\".join(map(chr, array)):\n        return \"WIN\"\n    else:\n        return \"LOSE\"\n```\n\n### 1.2.3.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1."
        ]
    },
    {
        "task_id": 27,
        "prompt": "\nQUESTION:\nConsider a rooted tree. A rooted tree has one special vertex called the root. All edges are directed from the root. Vertex u is called a child of vertex v and vertex v is called a parent of vertex u if there exists a directed edge from v to u. A vertex is called a leaf if it doesn't have children and has a parent.\n\nLet's call a rooted tree a spruce if its every non-leaf vertex has at least 3 leaf children. You are given a rooted tree, check whether it's a spruce.\n\nThe definition of a rooted tree can be found here.\n\n\n-----Input-----\n\nThe first line contains one integer n\u00a0\u2014 the number of vertices in the tree (3 \u2264 n \u2264 1 000). Each of the next n - 1 lines contains one integer p_{i} (1 \u2264 i \u2264 n - 1)\u00a0\u2014 the index of the parent of the i + 1-th vertex (1 \u2264 p_{i} \u2264 i).\n\nVertex 1 is the root. It's guaranteed that the root has at least 2 children.\n\n\n-----Output-----\n\nPrint \"Yes\" if the tree is a spruce and \"No\" otherwise.\n\n\n-----Examples-----\nInput\n4\n1\n1\n1\n\nOutput\nYes\n\nInput\n7\n1\n1\n1\n2\n2\n2\n\nOutput\nNo\n\nInput\n8\n1\n1\n1\n1\n3\n3\n3\n\nOutput\nYes\n\n\n\n-----Note-----\n\nThe first example:\n\n[Image]\n\nThe second example:\n\n$8$\n\nIt is not a spruce, because the non-leaf vertex 1 has only 2 leaf children.\n\nThe third example:\n\n[Image]\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    },
    {
        "task_id": 28,
        "prompt": "\nQUESTION:\nThere are n piles of pebbles on the table, the i-th pile contains a_{i} pebbles. Your task is to paint each pebble using one of the k given colors so that for each color c and any two piles i and j the difference between the number of pebbles of color c in pile i and number of pebbles of color c in pile j is at most one.\n\nIn other words, let's say that b_{i}, c is the number of pebbles of color c in the i-th pile. Then for any 1 \u2264 c \u2264 k, 1 \u2264 i, j \u2264 n the following condition must be satisfied |b_{i}, c - b_{j}, c| \u2264 1. It isn't necessary to use all k colors: if color c hasn't been used in pile i, then b_{i}, c is considered to be zero.\n\n\n-----Input-----\n\nThe first line of the input contains positive integers n and k (1 \u2264 n, k \u2264 100), separated by a space \u2014 the number of piles and the number of colors respectively.\n\nThe second line contains n positive integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 100) denoting number of pebbles in each of the piles.\n\n\n-----Output-----\n\nIf there is no way to paint the pebbles satisfying the given condition, output \"NO\" (without quotes) .\n\nOtherwise in the first line output \"YES\" (without quotes). Then n lines should follow, the i-th of them should contain a_{i} space-separated integers. j-th (1 \u2264 j \u2264 a_{i}) of these integers should be equal to the color of the j-th pebble in the i-th pile. If there are several possible answers, you may output any of them.\n\n\n-----Examples-----\nInput\n4 4\n1 2 3 4\n\nOutput\nYES\n1\n1 4\n1 2 4\n1 2 3 4\n\nInput\n5 2\n3 2 4 1 3\n\nOutput\nNO\n\nInput\n5 4\n3 2 4 3 5\n\nOutput\nYES\n1 2 3\n1 3\n1 2 3 4\n1 3 4\n1 1 2 3 4\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <stack>\n#include <sstream>\n#include <cassert>\n#include <numeric>\n#include <bitset>\n#include <list>\n#include <climits>\n#include <cfloat>\n\nusing namespace std;\n\nconst int MAX_N = 100 + 10;\nconst int MAX_K = 100 + 10;\n\nint n, k;\nint a[MAX_N];\n\nbool ok(int c, int i, int j) {\n    return abs(a[i] - a[j]) <= 1;\n}\n\nbool check() {\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i != j && !ok(1, i, j)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nint main() {\n    cin >> n >> k;\n    for (int i = 1; i <= n; i++) {\n        cin >> a[i];\n    }\n    if (!check()) {\n        cout << \"NO\" << endl;\n        return 0;\n    }\n    cout << \"YES\" << endl;\n    for (int i = 1; i <= n; i++) {\n        cout << a[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 29,
        "prompt": "\nQUESTION:\nDreamoon is standing at the position 0 on a number line. Drazil is sending a list of commands through Wi-Fi to Dreamoon's smartphone and Dreamoon follows them.\n\nEach command is one of the following two types:   Go 1 unit towards the positive direction, denoted as '+'  Go 1 unit towards the negative direction, denoted as '-' \n\nBut the Wi-Fi condition is so poor that Dreamoon's smartphone reports some of the commands can't be recognized and Dreamoon knows that some of them might even be wrong though successfully recognized. Dreamoon decides to follow every recognized command and toss a fair coin to decide those unrecognized ones (that means, he moves to the 1 unit to the negative or positive direction with the same probability 0.5). \n\nYou are given an original list of commands sent by Drazil and list received by Dreamoon. What is the probability that Dreamoon ends in the position originally supposed to be final by Drazil's commands?\n\n\n-----Input-----\n\nThe first line contains a string s_1 \u2014 the commands Drazil sends to Dreamoon, this string consists of only the characters in the set {'+', '-'}. \n\nThe second line contains a string s_2 \u2014 the commands Dreamoon's smartphone recognizes, this string consists of only the characters in the set {'+', '-', '?'}. '?' denotes an unrecognized command.\n\nLengths of two strings are equal and do not exceed 10.\n\n\n-----Output-----\n\nOutput a single real number corresponding to the probability. The answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 9}.\n\n\n-----Examples-----\nInput\n++-+-\n+-+-+\n\nOutput\n1.000000000000\n\nInput\n+-+-\n+-??\n\nOutput\n0.500000000000\n\nInput\n+++\n??-\n\nOutput\n0.000000000000\n\n\n\n-----Note-----\n\nFor the first sample, both s_1 and s_2 will lead Dreamoon to finish at the same position  + 1. \n\nFor the second sample, s_1 will lead Dreamoon to finish at position 0, while there are four possibilites for s_2: {\"+-++\", \"+-+-\", \"+--+\", \"+---\"} with ending position {+2, 0, 0, -2} respectively. So there are 2 correct cases out of 4, so the probability of finishing at the correct position is 0.5. \n\nFor the third sample, s_2 could only lead us to finish at positions {+1, -1, -3}, so the probability to finish at the correct position  + 3 is 0.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 30,
        "prompt": "\nQUESTION:\nLimak is an old brown bear. He often plays poker with his friends. Today they went to a casino. There are n players (including Limak himself) and right now all of them have bids on the table. i-th of them has bid with size a_{i} dollars.\n\nEach player can double his bid any number of times and triple his bid any number of times. The casino has a great jackpot for making all bids equal. Is it possible that Limak and his friends will win a jackpot?\n\n\n-----Input-----\n\nFirst line of input contains an integer n (2 \u2264 n \u2264 10^5), the number of players.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the bids of players.\n\n\n-----Output-----\n\nPrint \"Yes\" (without the quotes) if players can make their bids become equal, or \"No\" otherwise.\n\n\n-----Examples-----\nInput\n4\n75 150 75 50\n\nOutput\nYes\n\nInput\n3\n100 150 250\n\nOutput\nNo\n\n\n\n-----Note-----\n\nIn the first sample test first and third players should double their bids twice, second player should double his bid once and fourth player should both double and triple his bid.\n\nIt can be shown that in the second sample test there is no way to make all bids equal.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 31,
        "prompt": "\nQUESTION:\nThe median of a list of numbers is essentially its middle element after sorting.  The same number of elements occur after it as before.  Given a list of numbers with an odd number of elements, find the median?\n\nExample \n\n$arr=[5,3,1,2,4]$   \n\nThe sorted array $ar r'=[1,2,3,4,5]$.  The middle element and the median is $3$.  \n\nFunction Description\n\nComplete the findMedian function in the editor below.  \n\nfindMedian has the following parameter(s):  \n\nint arr[n]: an unsorted array of integers  \n\nReturns  \n\nint: the median of the array\n\nInput Format\n\nThe first line contains the integer $n$, the size of $\\textbf{arr}$. \n\nThe second line contains $n$ space-separated integers $arr\\left[i\\right]$\n\nConstraints\n\n$1\\leq n\\leq10000001$   \n$n$ is odd\n$-10000\\leq arr[i]\\leq10000$   \n\nSample Input 0\n7\n0 1 2 4 6 5 3\n\nSample Output 0\n3\n\nExplanation 0\n\nThe sorted $arr=[0,1,2,3,4,5,6]$.  It's middle element is at $ar r[3]=3$.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <bits/stdc++.h>\nusing namespace std;\n\nint findMedian(int arr[], int n) {\n    sort(arr,arr+n);\n    return arr[n/2];\n}\n\nint main() {\n    int n;\n    cin >> n;\n    int arr[n];\n    for(int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n    int result = findMedian(arr, n);\n    cout << result << endl;\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 32,
        "prompt": "\nQUESTION:\nYou are given two arrays of integers a and b. For each element of the second array b_{j} you should find the number of elements in array a that are less than or equal to the value b_{j}.\n\n\n-----Input-----\n\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 2\u00b710^5) \u2014 the sizes of arrays a and b.\n\nThe second line contains n integers \u2014 the elements of array a ( - 10^9 \u2264 a_{i} \u2264 10^9).\n\nThe third line contains m integers \u2014 the elements of array b ( - 10^9 \u2264 b_{j} \u2264 10^9).\n\n\n-----Output-----\n\nPrint m integers, separated by spaces: the j-th of which is equal to the number of such elements in array a that are less than or equal to the value b_{j}.\n\n\n-----Examples-----\nInput\n5 4\n1 3 5 7 9\n6 4 2 8\n\nOutput\n3 2 1 4\n\nInput\n5 5\n1 2 1 2 5\n3 1 4 1 5\n\nOutput\n4 2 4 2 5\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        cin >> a[i];\n    }\n    vector<int> b(m);\n    for (int i = 0; i < m; i++) {\n        cin >> b[i];\n    }\n    vector<int> ans(m);\n    for (int i = 0; i < m; i++) {\n        int count = 0;\n        for (int j = 0; j < n; j++) {\n            if (a[j] <= b[i]) {\n                count++;\n            }\n        }\n        ans[i] = count;\n    }\n    for (int i = 0; i < m; i++) {\n        cout << ans[i] << \" \";\n    }\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 33,
        "prompt": "\nQUESTION:\nTherasa is a Nurse. She wants to give some tablets to the patients in her practice.  All the patients sit in a line and each of them  has a rating score according to his or her health score. Therasa wants to give at least 1 tablet for each patient. Patients get jealous of their immediate neighbors, so if two patients sit next to each other then the one with the higher rating must get more tablets. Therasa wants to save money, so she wants to minimize the total number of tablets.  \n\nInput\nThe first line of the input is an integer N, the number of patients in Therasa\u2019s practice. Each of the following N lines contains an integer indicates the health score of each patient.\n\nOutput\nOutput a single line containing the minimum number of tablets Therasa must give.\n\nConstraints\n1 \u2264 N \u2264 100000\n1 \u2264 health score \u2264 100000  \n\nSAMPLE INPUT\n3\n1\n2\n2\n\nSAMPLE OUTPUT\n4\n\nExplanation\n\nHere 1, 2, 2 is the health score. Note that when two patients have equal health score they are allowed to have different number of tablets. Hence optimal distribution will be 1, 2, 1.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> v(n);\n    for (int i = 0; i < n; i++) {\n        cin >> v[i];\n    }\n    sort(v.begin(), v.end());\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        if (i == 0) {\n            ans += v[i];\n        } else {\n            if (v[i] > v[i - 1]) {\n                ans += v[i];\n            } else {\n                ans += v[i - 1];\n            }\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 34,
        "prompt": "\nQUESTION:\nThe king is left alone on the chessboard. In spite of this loneliness, he doesn't lose heart, because he has business of national importance. For example, he has to pay an official visit to square t. As the king is not in habit of wasting his time, he wants to get from his current position s to square t in the least number of moves. Help him to do this.\n\n<image>\n\nIn one move the king can get to the square that has a common side or a common vertex with the square the king is currently in (generally there are 8 different squares he can move to).\n\nInput\n\nThe first line contains the chessboard coordinates of square s, the second line \u2014 of square t.\n\nChessboard coordinates consist of two characters, the first one is a lowercase Latin letter (from a to h), the second one is a digit from 1 to 8.\n\nOutput\n\nIn the first line print n \u2014 minimum number of the king's moves. Then in n lines print the moves themselves. Each move is described with one of the 8: L, R, U, D, LU, LD, RU or RD. \n\nL, R, U, D stand respectively for moves left, right, up and down (according to the picture), and 2-letter combinations stand for diagonal moves. If the answer is not unique, print any of them. \n\nExamples\n\nInput\n\na8\nh1\n\n\nOutput\n\n7\nRD\nRD\nRD\nRD\nRD\nRD\nRD\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 35,
        "prompt": "\nQUESTION:\nThere is a grid with $n$ rows and $m$ columns, and three types of cells:\n\nAn empty cell, denoted with '.'.\n\nA stone, denoted with '*'.\n\nAn obstacle, denoted with the lowercase Latin letter 'o'.\n\nAll stones fall down until they meet the floor (the bottom row), an obstacle, or other stone which is already immovable. (In other words, all the stones just fall down as long as they can fall.)\n\nSimulate the process. What does the resulting grid look like?\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1 \\leq t \\leq 100$) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 50$) \u2014 the number of rows and the number of columns in the grid, respectively.\n\nThen $n$ lines follow, each containing $m$ characters. Each of these characters is either '.', '*', or 'o' \u2014 an empty cell, a stone, or an obstacle, respectively.\n\n\n-----Output-----\n\nFor each test case, output a grid with $n$ rows and $m$ columns, showing the result of the process.\n\nYou don't need to output a new line after each test, it is in the samples just for clarity.\n\n\n-----Examples-----\n\nInput\n3\n6 10\n.*.*....*.\n.*.......*\n...o....o.\n.*.*....*.\n..........\n.o......o*\n2 9\n...***ooo\n.*o.*o.*o\n5 5\n*****\n*....\n*****\n....*\n*****\nOutput\n..........\n...*....*.\n.*.o....o.\n.*........\n.*......**\n.o.*....o*\n\n....**ooo\n.*o**o.*o\n\n.....\n*...*\n*****\n*****\n*****\n\n\n-----Note-----\n\nNone\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    },
    {
        "task_id": 36,
        "prompt": "\nQUESTION:\nYou are given two even integers $n$ and $m$. Your task is to find any binary matrix $a$ with $n$ rows and $m$ columns where every cell $(i,j)$ has exactly two neighbours with a different value than $a_{i,j}$.\n\nTwo cells in the matrix are considered neighbours if and only if they share a side. More formally, the neighbours of cell $(x,y)$ are: $(x-1,y)$, $(x,y+1)$, $(x+1,y)$ and $(x,y-1)$.\n\nIt can be proven that under the given constraints, an answer always exists.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases. The following lines contain the descriptions of the test cases.\n\nThe only line of each test case contains two even integers $n$ and $m$ ($2 \\le n,m \\le 50$) \u2014 the height and width of the binary matrix, respectively.\n\n\n-----Output-----\n\nFor each test case, print $n$ lines, each of which contains $m$ numbers, equal to $0$ or $1$ \u2014 any binary matrix which satisfies the constraints described in the statement.\n\nIt can be proven that under the given constraints, an answer always exists.\n\n\n-----Examples-----\n\nInput\n3\n2 4\n2 2\n4 4\nOutput\n1 0 0 1\n0 1 1 0\n1 0\n0 1\n1 0 1 0\n0 0 1 1\n1 1 0 0\n0 1 0 1\n\n\n-----Note-----\n\nWhite means $0$, black means $1$.\n\nThe binary matrix from the first test case\n\nThe binary matrix from the second test case\n\nThe binary matrix from the third test case\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    },
    {
        "task_id": 37,
        "prompt": "\nQUESTION:\nFor a given 2D vector described by cartesian coordinates of its initial point and terminal point in the following format:\n\n```python\n[[x1, y1], [x2, y2]]\n```\n\nYour function must return this vector's length represented as a floating point number.\n\nError must be within 1e-7.\n\nCoordinates can be integers or floating point numbers.def vector_length(vector):\n\t\nUse Call-Based format\nANSWER:\n",
        "output": [
            "\n```python\ndef vector_length(vector):\n    return (((vector[0][0] - vector[1][0])**2) + ((vector[0][1] - vector[1][1])**2))**0.5\n```\n\n### 2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2"
        ]
    },
    {
        "task_id": 38,
        "prompt": "\nQUESTION:\nVasya likes the number $239$. Therefore, he considers a number pretty if its last digit is $2$, $3$ or $9$. \nVasya wants to watch the numbers between $L$ and $R$ (both inclusive), so he asked you to determine how many pretty numbers are in this range. Can you help him?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $L$ and $R$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of pretty numbers between $L$ and $R$.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le L \\le R \\le 10^5$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n2\n1 10\n11 33\n\n-----Example Output-----\n3\n8\n\n-----Explanation-----\nExample case 1: The pretty numbers between $1$ and $10$ are $2$, $3$ and $9$.\nExample case 2: The pretty numbers between $11$ and $33$ are $12$, $13$, $19$, $22$, $23$, $29$, $32$ and $33$.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n```python\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nt = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n    ans = 0\n    for i in range(l, r + 1):\n        if str(i)[-1] == '2' or str(i)[-1] == '3' or str(i)[-1] == '9':\n            ans += 1\n    print(ans)\n```\n\n### 10. [Difference](https://www.codechef.com/problems/DIFF)\n"
        ]
    },
    {
        "task_id": 39,
        "prompt": "\nQUESTION:\nMartians are actively engaged in interplanetary trade. Olymp City, the Martian city known for its spaceport, has become a place where goods from all the corners of our Galaxy come. To deliver even more freight from faraway planets, Martians need fast spaceships.\n\nA group of scientists conducts experiments to build a fast engine for the new spaceship. In the current experiment, there are $n$ elementary particles, the $i$-th of them has type $a_i$.\n\nDenote a subsegment of the particle sequence ($a_1, a_2, \\dots, a_n$) as a sequence ($a_l, a_{l+1}, \\dots, a_r$) for some left bound $l$ and right bound $r$ ($1 \\le l \\le r \\le n$). For instance, the sequence $(1\\ 4\\ 2\\ 8\\ 5\\ 7)$ for $l=2$ and $r=4$ has the sequence $(4\\ 2\\ 8)$ as a subsegment. Two subsegments are considered different if at least one bound of those subsegments differs.\n\nNote that the subsegments can be equal as sequences but still considered different. For example, consider the sequence $(1\\ 1\\ 1\\ 1\\ 1)$ and two of its subsegments: one with $l=1$ and $r=3$ and another with $l=2$ and $r=4$. Both subsegments are equal to $(1\\ 1\\ 1)$, but still considered different, as their left and right bounds differ.\n\nThe scientists want to conduct a reaction to get two different subsegments of the same length. Denote this length $k$. The resulting pair of subsegments must be harmonious, i. e. for some $i$ ($1 \\le i \\le k$) it must be true that the types of particles on the $i$-th position are the same for these two subsegments. For example, the pair $(1\\ 7\\ 3)$ and $(4\\ 7\\ 8)$ is harmonious, as both subsegments have $7$ on the second position. The pair $(1\\ 2\\ 3)$ and $(3\\ 1\\ 2)$ is not harmonious.\n\nThe longer are harmonious subsegments, the more chances for the scientists to design a fast engine. So, they asked you to calculate the maximal possible length of harmonious pair made of different subsegments.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases. The following are descriptions of the test cases.\n\nThe first line contains an integer $n$ ($2 \\le n \\le 150000$) \u2014 the amount of elementary particles in the sequence.\n\nThe second line contains $n$ integers $a_i$ ($1 \\le a_i \\le 150000$) \u2014 types of elementary particles.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3\\cdot10^5$.\n\n\n-----Output-----\n\nFor each test, print a single integer, maximal possible length of harmonious pair made of different subsegments. If such pair does not exist, print $-1$ instead.\n\n\n-----Examples-----\n\nInput\n4\n7\n3 1 5 2 1 3 4\n6\n1 1 1 1 1 1\n6\n1 4 2 8 5 7\n2\n15 15\nOutput\n4\n5\n-1\n1\n\n\n-----Note-----\n\nThe first test case is shown on the picture below:\n\nAs you can see from it, you may choose the subsegments $(2\\ 1\\ 3\\ 4)$ and $(3\\ 1\\ 5\\ 2)$, which are a harmonious pair. Their length is equal to $4$, so the answer is $4$.\n\nIn the second test case, you need to take two subsegments: one with $l=1$ and $r=5$, and one with $l=2$ and $r=6$. It's not hard to observe that these segments are a harmonious pair and considered different even though they are both equal to $(1\\ 1\\ 1\\ 1\\ 1)$.\n\nIn the third test case, you cannot make a harmonious pair, so the answer is $-1$.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    },
    {
        "task_id": 40,
        "prompt": "\nQUESTION:\n## Description\n\nPeter enjoys taking risks, and this time he has decided to take it up a notch!\n\nPeter asks his local barman to pour him **n** shots, after which Peter then puts laxatives in **x** of them. He then turns around and lets the barman shuffle the shots. Peter approaches the shots and drinks **a** of them one at a time. Just one shot is enough to give Peter a runny tummy. What is the probability that Peter doesn't need to run to the loo?\n\n## Task\n\nYou are given:\n\n**n** - The total number of shots.\n\n**x** - The number of laxative laden shots.\n\n**a** - The number of shots that peter drinks.\n\n\nreturn the probability that Peter won't have the trots after drinking. **n** will always be greater than **x**, and **a** will always be less than **n**.\n\n**You must return the probability rounded to two decimal places i.e. 0.05 or 0.81**def get_chance(n, x, a):\n\t\nUse Call-Based format\nANSWER:\n",
        "output": [
            "\n## Solution\n\n```python\ndef get_chance(n, x, a):\n    # Write your code here\n    return round(((n-x)*(n-x+1)/(n*(n-a+1)))*((x-a+1)/(x+1)),2)\n```\n\n## Test Cases\n\n```python\nprint(get_chance(10, 5, 3))\nprint(get_chance(10, 5, 4))\nprint(get_chance(10, 5, 5))\nprint(get_chance(10, 5, 6))\nprint(get_chance(10, 5, 7))\nprint(get_chance(10, 5, 8))\nprint(get_chance(10, 5, 9))\nprint(get_chance(10, 5, 10))\nprint(get_chance(10, 5, 11))\nprint(get_chance(10, 5, 12))\nprint(get_chance(10, 5, 13))\nprint(get_chance(10, 5, 14))\nprint(get_chance(10, 5, 15))\nprint(get_chance(10, 5, 16))\nprint(get_chance(10, 5, 17))\nprint(get_chance(10, 5, 18))\nprint(get_chance(10, 5, 19))\nprint(get_chance(10, 5, 20))\nprint(get_chance(10, 5, 21))\nprint(get_chance(10, 5, 22))\nprint(get_chance(10, 5, 23))\nprint(get_chance(10, 5, 24))\nprint(get_chance(10, 5, 25))\nprint(get_chance(10, 5, 26))\nprint(get_chance"
        ]
    },
    {
        "task_id": 41,
        "prompt": "\nQUESTION:\nRaghu and Sayan both like to eat (a lot) but since they are also looking after their health, they can only eat a limited amount of calories per day. So when Kuldeep invites them to a party, both Raghu and Sayan decide to play a game. The game is simple, both Raghu and Sayan will eat the dishes served at the party till they are full, and the one who eats maximum number of distinct dishes is the winner. However, both of them can only eat a dishes if they can finish it completely i.e. if Raghu can eat only 50 kCal in a day and has already eaten dishes worth 40 kCal, then he can't eat a dish with calorie value greater than 10 kCal. \nGiven that all the dishes served at the party are infinite in number, (Kuldeep doesn't want any of his friends to miss on any dish) represented by their calorie value(in kCal) and the amount of kCal Raghu and Sayan can eat in a day, your job is to find out who'll win, in case of a tie print \u201cTie\u201d (quotes for clarity).\n\nInput:\nFirst line contains number of test cases T.\nEach test case contains two lines.\nFirst line contains three integers A, B and N. \nwhere A and B is respectively the maximum amount of kCal Raghu and Sayan can eat per day, respectively and N is the number of dishes served at the party.\nNext line contains N integers where i^th integer is the amount of kCal i^th dish has.\n\nOutput:\n\nFor each test case print \"Raghu Won\" (quotes for clarity) if Raghu wins else if print \"Sayan Won\" (quotes for clarity) if Sayan wins else print \"Tie\" (quotes for clarity) if both eat equal number of dishes.\n\nConstraints:\n\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 10000\n1 \u2264 kCal value of each dish \u2264 100000\n1 \u2264 A, B \u2264 1000000000  \n\nSAMPLE INPUT\n3\n15 20 3\n10 5 4\n3 10 2\n4 7\n10 8 3\n4 5 5\n\nSAMPLE OUTPUT\nSayan Won\nSayan Won\nRaghu Won\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <set>\n#include <map>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <cstdlib>\n#include <cctype>\n#include <queue>\n#include <stack>\n#include <sstream>\n#include <iterator>\n#include <bitset>\n#include <list>\n#include <numeric>\n#include <ctime>\n#include <cassert>\n#include <regex>\nusing namespace std;\n\nint main() {\n    int t;\n    cin >> t;\n    while(t--) {\n        int a, b, n;\n        cin >> a >> b >> n;\n        vector<int> dishes;\n        for(int i = 0; i < n; i++) {\n            int x;\n            cin >> x;\n            dishes.push_back(x);\n        }\n        int ragu = 0, sayan = 0;\n        for(int i = 0; i < n; i++) {\n            if(dishes[i] <= a) {\n                ragu++;\n            }\n            if(dishes[i] <= b) {\n                sayan++;\n            }\n        }\n        if(ragu > sayan) {\n            cout << \"Raghu Won\" << endl;\n        } else if(ragu < sayan) {\n            cout << \"Sayan Won\" << endl;\n        } else {\n            cout << \"Tie\" << endl;\n        }\n    }\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 42,
        "prompt": "\nQUESTION:\nAlyona has recently bought a miniature fridge that can be represented as a matrix with $h$ rows and $2$ columns. Initially there is only one shelf at the bottom of the fridge, but Alyona can install arbitrary number of shelves inside the fridge between any two rows. A shelf is two cells wide, does not occupy any space but separates the inside of the fridge to the lower and upper part.\n\n [Image] An example of a fridge with $h = 7$ and two shelves. The shelves are shown in black. The picture corresponds to the first example. \n\nAlyona has $n$ bottles of milk that she wants to put in the fridge. The $i$-th bottle is $a_i$ cells tall and $1$ cell wide. She can put a bottle on some shelf if the corresponding space above the shelf is at least as tall as the bottle. She can not put a bottle on top of another bottle (if there is no shelf between them). Two bottles can not share a cell.\n\nAlyona is interested in the largest integer $k$ such that she can put bottles $1$, $2$, ..., $k$ in the fridge at the same time. Find this largest $k$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $h$ ($1 \\le n \\le 10^3$, $1 \\le h \\le 10^9$)\u00a0\u2014 the number of bottles and the height of the fridge.\n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\le a_i \\le h$)\u00a0\u2014 the heights of the bottles.\n\n\n-----Output-----\n\nPrint the single integer $k$\u00a0\u2014 the maximum integer such that Alyona can put the bottles $1$, $2$, ..., $k$ in the fridge at the same time. If Alyona can put all bottles in the fridge, print $n$. It is easy to see that Alyona can always put at least one bottle in the fridge.\n\n\n-----Examples-----\nInput\n5 7\n2 3 5 4 1\n\nOutput\n3\n\nInput\n10 10\n9 1 1 1 1 1 1 1 1 1\n\nOutput\n4\n\nInput\n5 10\n3 1 4 2 4\n\nOutput\n5\n\n\n\n-----Note-----\n\nOne of optimal locations in the first example is shown on the picture in the statement.\n\nOne of optimal locations in the second example is shown on the picture below.\n\n [Image] \n\nOne of optimal locations in the third example is shown on the picture below.\n\n [Image]\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 43,
        "prompt": "\nQUESTION:\nVasya has got an undirected graph consisting of $n$ vertices and $m$ edges. This graph doesn't contain any self-loops or multiple edges. Self-loop is an edge connecting a vertex to itself. Multiple edges are a pair of edges such that they connect the same pair of vertices. Since the graph is undirected, the pair of edges $(1, 2)$ and $(2, 1)$ is considered to be multiple edges. Isolated vertex of the graph is a vertex such that there is no edge connecting this vertex to any other vertex.\n\nVasya wants to know the minimum and maximum possible number of isolated vertices in an undirected graph consisting of $n$ vertices and $m$ edges. \n\n\n-----Input-----\n\nThe only line contains two integers $n$ and $m~(1 \\le n \\le 10^5, 0 \\le m \\le \\frac{n (n - 1)}{2})$.\n\nIt is guaranteed that there exists a graph without any self-loops or multiple edges with such number of vertices and edges.\n\n\n-----Output-----\n\nIn the only line print two numbers $min$ and $max$ \u2014 the minimum and maximum number of isolated vertices, respectively.\n\n\n-----Examples-----\nInput\n4 2\n\nOutput\n0 1\n\nInput\n3 1\n\nOutput\n1 1\n\n\n\n-----Note-----\n\nIn the first example it is possible to construct a graph with $0$ isolated vertices: for example, it should contain edges $(1, 2)$ and $(3, 4)$. To get one isolated vertex, we may construct a graph with edges $(1, 2)$ and $(1, 3)$. \n\nIn the second example the graph will always contain exactly one isolated vertex.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    },
    {
        "task_id": 44,
        "prompt": "\nQUESTION:\nPerhaps it would be convenient to solve first ```Probabilities for Sums in Rolling Cubic Dice``` see at: http://www.codewars.com/kata/probabilities-for-sums-in-rolling-cubic-dice\n\nSuppose that we roll dice that we never used, a tetrahedral die that has only 4 sides(values 1 to 4), or perhaps better the dodecahedral one with 12 sides and 12 values (from 1 to 12), or look! an icosahedral die with 20 sides and 20 values (from 1 to 20).\n\nLet's roll dice of same type and try to see the distribution of the probability for all the possible sum values.\n\nSuppose that we roll 3 tetrahedral dice:\n```\nSum   Prob    Amount of hits           Combinations\n3   0.015625     1             {1,1,1}\n4   0.046875     3             {1,2,1},{2,1,1},{1,1,2}\n5   0.09375      6             {3,1,1},{1,1,3},{1,2,2},{1,3,1},{2,2,1},{2,1,2}\n6   0.15625     10             {2,2,2},{1,3,2},{3,2,1},{1,4,1},{2,1,3},{1,1,4},{4,1,1},{3,1,2},{1,2,3},{2,3,1}\n7   0.1875      12             {2,3,2},{1,2,4},{2,1,4},{1,4,2},{3,2,2}, {4,2,1},{3,3,1},{3,1,3},{2,2,3},{4,1,2},{2,4,1},{1,3,3}\n8   0.1875      12             {2,3,3},{3,3,2},{2,2,4},{4,3,1},{2,4,2},{4,1,3},{4,2,2},{3,4,1},{1,3,4},{3,2,3},{3,1,4},{1,4,3}\n9   0.15625     10             {3,3,3},{4,4,1},{2,4,3},{4,2,3},{4,3,2},{1,4,4},{4,1,4},{3,4,2},{2,3,4},{3,2,4}\n10  0.09375      6             {3,4,3},{4,4,2},{3,3,4},{4,2,4},(2,4,4),{4,3,3}\n11  0.046875     3             {4,3,4},{3,4,4},{4,4,3}\n12  0.015625     1             {4,4,4}\ntot: 1.0000\n```\nNote that the total sum of all the probabilities for each end has to be ```1.0000```\n\nThe register of hits per each sum value will be as follows:\n```\n[[3, 1], [4, 3], [5, 6], [6, 10], [7, 12], [8, 12], [9, 10], [10, 6], [11, 3], [12, 1]]\n```\nCreate the function ```reg_sum_hits()``` that receive two arguments:\n\n- number of dice, ```n```\n- number of sides of the die, ```s```\n\nThe function will output a list of pairs with the sum value and the corresponding hits for it.\n\nFor the example given above:\n```python\nreg_sum_hits(3, 4) == [[3, 1], [4, 3], [5, 6], [6, 10], [7, 12], [8, 12], [9, 10], [10, 6], [11, 3], [12, 1]]\n```\nYou will find more examples in the Example Test Cases.\n\nAssumption: If the die has n sides, the values of it are from ```1``` to ```n```def reg_sum_hits(n, s):\n\t\nUse Call-Based format\nANSWER:\n",
        "output": [
            "```python\ndef reg_sum_hits(n, s):\n    return [[i, sum(1 for _ in range(i) if all(random.randint(1, s) <= i for _ in range(n)))] for i in range(1, s + 1)]\n```\n\n### 2. \n"
        ]
    },
    {
        "task_id": 45,
        "prompt": "\nQUESTION:\nThe secret services of Armin, an otherwise peace-loving country, have decided to perform a surgical strike in the war-torn city of Tashka. Tashka is under enemy control and the objective of the strike is to gain control over the city. \nThe mission is subdivided into the following steps:\n1) Divide in groups and infiltrate all enemy bases in Tashka as unarmed civilians, and find the status of enemy's defense strength at that base.\n ( You can assume that the number of groups are sufficiently large to cover each base separately )\n2) Pick up the required amount of ammunition from our secret ammunition store in the city.\n3) Return to the bases and destroy the enemy defense.\n4) Rush to the Town Hall for the Helicopter pick up out of the town.  \n\nThere are a total of  N buildings in Tashka, numbered from 1 to N .  The agents will be dropped at building denoted by S, post which they will divide into groups and each enemy base will have a group moving towards it. The ammunition store is denoted by A and town hall is denoted by H . All the buildings except these three are enemy bases and are to be infiltrated.  There are a total of M bidirectional roads in the city, each road connects two cities. There can be multiple roads between a pair of cities and each road has a time taken to cross associated with its terrain.\nMonk is made in charge of the pickup.  He can not land the Helicopter before all the groups have arrived at the Town Hall. Find the Minimum units of Time,  post dropping the agents, that the Helicopter should be landed such that all groups are able to reach the Town Hall.  \n\nInput:\nFirst line contains an integer T. T test cases follow.\nFirst line of each test cases contains two space-separated integers N, M.\nEach of the next M lines contains three space-separated integers X, Y, C, denoting that there is a bidirectional road between X and Y that needs C units of time to cross. \nThe next line contains three space-separated integers S, A and H (not necessarily distinct) .  \n\nOutput:\nPrint the answer to each test case in a new line.  \n\nConstraints:\n1 \u2264 T \u2264 10\n4 \u2264 N \u2264 100\n1 \u2264 M \u2264 10000\n1 \u2264 X, Y, S, A, H  \u2264 N\n1 \u2264 C \u2264 100  \n\nNote:\nTime taken to note status of enemy defense, load ammunition or attack enemy enemy base can be considered negligible compared to time taken to travel.\n\nSAMPLE INPUT\n1\n4 4\n1 4 1\n1 2 1\n2 3 1\n2 4 1\n1 2 3\n\nSAMPLE OUTPUT\n5\n\nExplanation\n\nAgents start at 1, rush to enemy base at 4 (Time taken =2 units). Go to ammunition store at 2, and return back to attack enemy base (Time taken=2 units) , destroy the base and head off to pickup point (Time taken =1 units).\nHence, 2+2+1= 5units.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <cstring>\n#include <cmath>\n#include <cstdlib>\n#include <cstdio>\n#include <climits>\n#include <iomanip>\n#define MAXN 1000000000\n#define MOD 1000000007\n#define ll long long\n#define ld long double\n#define pb push_back\n#define pii pair<int,int>\n#define pll pair<ll,ll>\n#define vi vector<int>\n#define vll vector<ll>\n#define vpll vector<pll>\n#define vpii vector<pii>\n#define vvi vector<vi>\n#define vvll vector<vll>\n#define vvpii vector<vpii>\n#define mii map<int,int>\n#define mll map<ll,ll>\n#define mpll map<pll,pll>\n#define mpii map<pii,int>\n#define mvi map<vi,int>\n#define mvii map<vii,int>\n#define mvvi map<vvi,int>\n#define mvll map<vll,ll>\n#define umii unordered_map<int,int>\n#define umll unordered_map<ll,ll>\n#define umpll unordered_map<pll,pll>\n#define umpii unordered_map<pii,int>\n#define umvi unordered_map<vi,int>\n#define umvii unordered_map<vii,int>\n#define umvvi unordered_map<vvi,int>\n#define umvll unordered_map<vll,ll>\n#define usii unordered_set<int>\n#define usll unordered_set<ll>\n#define uspll unordered_set<pll>\n#define uspii unordered_set<pii>\n#define usvi unordered_set<vi>\n#define us"
        ]
    },
    {
        "task_id": 46,
        "prompt": "\nQUESTION:\nAshu and Shanu are best buddies. One day Shanu gives Ashu a problem to test his intelligence.He gives him an array of N natural numbers and asks him to solve the following queries:-\n\nQuery 0:- modify the element present at index i to x.\nQuery 1:- count the number of even numbers in range l to r inclusive.\nQuery 2:- count the number of odd numbers in range l to r inclusive.    \n\ninput:\nFirst line of the input contains the number N. Next line contains N natural numbers. \nNext line contains an integer Q followed by Q queries.\n0 x y - modify the number at index x to y.  \n1 x y - count the number of even numbers in range l to r inclusive.\n2 x y - count the number of odd numbers in range l to r inclusive.  \n\nConstraints:\n1 \u2264 N,Q \u2264 10^5\n1 \u2264 l \u2264 r \u2264 N  \n0 \u2264 Ai \u2264 10^9\n1 \u2264 x \u2264 N\n0 \u2264 y \u2264 10^9\n\nNote:- indexing starts from 1.\n\nSAMPLE INPUT\n6\n1 2 3 4 5 6\n4\n1 2 5\n2 1 4\n0 5 4\n1 1 6\n\nSAMPLE OUTPUT\n2\n2\n4\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n\tint n, q;\n\tcin >> n >> q;\n\tvector<int> a(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> a[i];\n\t}\n\twhile (q--) {\n\t\tint type, l, r, x;\n\t\tcin >> type >> l >> r;\n\t\tif (type == 0) {\n\t\t\tcin >> x;\n\t\t\ta[l - 1] = x;\n\t\t}\n\t\telse if (type == 1) {\n\t\t\tint count = 0;\n\t\t\tfor (int i = l - 1; i <= r - 1; i++) {\n\t\t\t\tif (a[i] % 2 == 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout << count << endl;\n\t\t}\n\t\telse {\n\t\t\tint count = 0;\n\t\t\tfor (int i = l - 1; i <= r - 1; i++) {\n\t\t\t\tif (a[i] % 2 != 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout << count << endl;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 47,
        "prompt": "\nQUESTION:\nWaiter: Good day, sir! What would you like to order? \n\nLucas: One Cheese & Random Toppings (CRT) pizza for me, please. \n\nWaiter: Very good, sir. There are $N$ toppings to choose from, but you can choose only ${R}$ toppings. \n\nLucas: Hmm, let's see...  \n\n...Then Lucas started writing down all the ways to choose R toppings from N toppings in a piece of napkin. Soon he realized that it's impossible to write them all, because there are a lot. So he asked himself: How many ways are there to choose exactly ${R}$ toppings from $N$ toppings?\n\nSince Lucas doesn't have all the time in the world, he only wished to calculate the answer modulo ${M}$, where M is a squarefree number whose prime factors are each less than 50.\n\nFortunately, Lucas has a Wi-Fi-enabled laptop with him, so he checked the internet and discovered the following useful links: \n\nLucas' theorem \n\nChinese remainder theorem (CRT)  \n\nInput Format \n\nThe first line of input contains ${T}$, the number of test cases. The following lines describe the test cases.\n\nEach test case consists of one line containing three space-separated integers: $N$, ${R}$ and ${M}$.  \n\nConstraints \n\n$1\\leq T\\leq200$ \n\n$1\\leq M\\leq10^9$ \n\n$1\\leq R\\leq N\\leq10^9$ \n\n${M}$ is squarefree and its prime factors are less than $50$\n\nOutput Format \n\nFor each test case, output one line containing a single integer: the number of ways to choose ${R}$ toppings from $N$ toppings, modulo ${M}$.  \n\nSample Input  \n\n6\n5 2 1001\n5 2 6\n10 5 15\n20 6 210\n13 11 21\n10 9 5    \n\nSample Output  \n\n10\n4\n12\n120\n15\n0\n\nExplanation  \n\nCase 1 and 2: Lucas wants to choose 2 toppings from 5 toppings. There are ten ways, namely (assuming the toppings are A, B, C, D and E):  \n\nAB, AC, AD, AE, BC, BD, BE, CD, CE, DE  \n\nThus, \n\nCase 1: $10\\:{mod}\\:1001=10$ \n\nCase 2: $10\\:{mod}\\:6=4$  \n\nCase 6: We can choose 9 toppings from 10 by removing only one from our choice. Thus, we have ten ways and $10\\:{mod}\\:5=0$\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int t;\n    cin >> t;\n    while(t--) {\n        int n, r, m;\n        cin >> n >> r >> m;\n        int ans = 1;\n        for(int i = 1; i <= r; i++) {\n            ans *= (n - i + 1);\n            ans %= m;\n        }\n        for(int i = 1; i <= n - r; i++) {\n            ans *= i;\n            ans %= m;\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        ]
    },
    {
        "task_id": 48,
        "prompt": "\nQUESTION:\nWrite a function that takes in a binary string and returns the equivalent decoded text (the text is ASCII encoded).\n\nEach 8 bits on the binary string represent 1 character on the ASCII table.\n\nThe input string will always be a valid binary string.\n\nCharacters can be in the range from \"00000000\" to \"11111111\" (inclusive)\n\nNote: In the case of an empty binary string your function should return an empty string.def binary_to_string(binary):\n\t\nUse Call-Based format\nANSWER:\n",
        "output": [
            "\ndef binary_to_string(binary):\n    if not binary:\n        return ''\n    return chr(int(binary, 2)) + binary_to_string(binary[3:])\n\n"
        ]
    },
    {
        "task_id": 49,
        "prompt": "\nQUESTION:\nThere are $n$ people participating in some contest, they start participating in $x$ minutes intervals. That means the first participant starts at time $0$, the second participant starts at time $x$, the third \u2014 at time $2 \\cdot x$, and so on.\n\nDuration of contest is $t$ minutes for each participant, so the first participant finishes the contest at time $t$, the second \u2014 at time $t + x$, and so on. When a participant finishes the contest, their dissatisfaction equals to the number of participants that started the contest (or starting it now), but haven't yet finished it.\n\nDetermine the sum of dissatisfaction of all participants.\n\n\n-----Input-----\n\nThe first line contains a single integer $k$ ($1 \\le k \\le 1000$) \u2014 the number of test cases.\n\nEach of the next $k$ lines contains three integers $n$, $x$, $t$ ($1 \\le n, x, t \\le 2 \\cdot 10^9$) \u2014 the number of participants, the start interval and the contest duration.\n\n\n-----Output-----\n\nPrint $k$ lines, in the $i$-th line print the total dissatisfaction of participants in the $i$-th test case.\n\n\n-----Examples-----\n\nInput\n4\n4 2 5\n3 1 2\n3 3 10\n2000000000 1 2000000000\nOutput\n5\n3\n3\n1999999999000000000\n\n\n-----Note-----\n\nIn the first example the first participant starts at $0$ and finishes at time $5$. By that time the second and the third participants start, so the dissatisfaction of the first participant is $2$.\n\nThe second participant starts at time $2$ and finishes at time $7$. By that time the third the fourth participants start, so the dissatisfaction of the second participant is $2$.\n\nThe third participant starts at $4$ and finishes at $9$. By that time the fourth participant starts, so the dissatisfaction of the third participant is $1$.\n\nThe fourth participant starts at $6$ and finishes at $11$. By time $11$ everyone finishes the contest, so the dissatisfaction of the fourth participant is $0$.\n\nIn the second example the first participant starts at $0$ and finishes at time $2$. By that time the second participants starts, and the third starts at exactly time $2$. So the dissatisfaction of the first participant is $2$.\n\nThe second participant starts at time $1$ and finishes at time $3$. At that time the third participant is solving the contest.\nUse Standard Input format\nANSWER:\n",
        "output": [
            "\n"
        ]
    }
]