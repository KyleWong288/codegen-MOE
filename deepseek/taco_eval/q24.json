{
    "question": "You are given two even integers $n$ and $m$. Your task is to find any binary matrix $a$ with $n$ rows and $m$ columns where every cell $(i,j)$ has exactly two neighbours with a different value than $a_{i,j}$.\n\nTwo cells in the matrix are considered neighbours if and only if they share a side. More formally, the neighbours of cell $(x,y)$ are: $(x-1,y)$, $(x,y+1)$, $(x+1,y)$ and $(x,y-1)$.\n\nIt can be proven that under the given constraints, an answer always exists.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line of input contains a single integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases. The following lines contain the descriptions of the test cases.\n\nThe only line of each test case contains two even integers $n$ and $m$ ($2 \\le n,m \\le 50$) \u2014 the height and width of the binary matrix, respectively.\n\n\n-----Output-----\n\nFor each test case, print $n$ lines, each of which contains $m$ numbers, equal to $0$ or $1$ \u2014 any binary matrix which satisfies the constraints described in the statement.\n\nIt can be proven that under the given constraints, an answer always exists.\n\n\n-----Examples-----\n\nInput\n3\n2 4\n2 2\n4 4\nOutput\n1 0 0 1\n0 1 1 0\n1 0\n0 1\n1 0 1 0\n0 0 1 1\n1 1 0 0\n0 1 0 1\n\n\n-----Note-----\n\nWhite means $0$, black means $1$.\n\nThe binary matrix from the first test case\n\nThe binary matrix from the second test case\n\nThe binary matrix from the third test case",
    "solutions": [
        "t = int(input())\nwhile t > 0:\n\tt -= 1\n\t(n, m) = map(int, input().split())\n\ts1 = '1'\n\twhile True:\n\t\ts1 += '0'\n\t\tif len(s1) == m:\n\t\t\tbreak\n\t\ts1 += '0'\n\t\tif len(s1) == m:\n\t\t\tbreak\n\t\ts1 += '1'\n\t\tif len(s1) == m:\n\t\t\tbreak\n\t\ts1 += '1'\n\t\tif len(s1) == m:\n\t\t\tbreak\n\ts2 = ''\n\tfor i in range(m):\n\t\tif s1[i] == '1':\n\t\t\ts2 += '0'\n\t\telse:\n\t\t\ts2 += '1'\n\ts1 = ' '.join(s1)\n\ts2 = ' '.join(s2)\n\tprint(s1)\n\tn -= 1\n\twhile True:\n\t\tif n == 0:\n\t\t\tbreak\n\t\tn -= 1\n\t\tprint(s2)\n\t\tif n == 0:\n\t\t\tbreak\n\t\tn -= 1\n\t\tprint(s2)\n\t\tif n == 0:\n\t\t\tbreak\n\t\tn -= 1\n\t\tprint(s1)\n\t\tif n == 0:\n\t\t\tbreak\n\t\tn -= 1\n\t\tprint(s1)\n",
        "t = int(input())\nfor _ in range(t):\n\t(n, m) = input().split(' ')\n\t(n, m) = (int(n), int(m))\n\t(s1, s2) = ('', '')\n\tfor i in range(m):\n\t\tif i % 4 == 0 or i % 4 == 3:\n\t\t\ts1 = s1 + '1 '\n\t\t\ts2 = s2 + '0 '\n\t\telse:\n\t\t\ts1 = s1 + '0 '\n\t\t\ts2 = s2 + '1 '\n\tfor i in range(n):\n\t\tif i % 4 == 0 or i % 4 == 3:\n\t\t\tprint(s1)\n\t\telse:\n\t\t\tprint(s2)\n",
        "t = int(input())\nfor _ in range(t):\n\t(n, m) = [int(x) for x in input().split()]\n\trow = [1, 0, 0, 1]\n\twhile len(row) < m:\n\t\trow += [1, 0, 0, 1]\n\tif m % 4:\n\t\trow = row[:-2]\n\trow2 = [1 - x for x in row]\n\trow = ' '.join((str(x) for x in row))\n\trow2 = ' '.join((str(x) for x in row2))\n\tfor _ in range(n // 4):\n\t\tprint(row)\n\t\tprint(row2)\n\t\tprint(row2)\n\t\tprint(row)\n\tif n % 4:\n\t\tprint(row)\n\t\tprint(row2)\n",
        "import sys\ninput = sys.stdin.readline\nt = int(input())\nout = []\nfor _ in range(t):\n\t(n, m) = [int(x) for x in input().split()]\n\tline1 = '1 0 0 1 ' * (m // 4)\n\tline2 = '0 1 1 0 ' * (m // 4)\n\tseq1 = [1, 0, 0, 1]\n\tseq2 = [0, 1, 1, 0]\n\tfor i in range(m % 4):\n\t\tline1 += str(seq1[i]) + ' '\n\t\tline2 += str(seq2[i]) + ' '\n\tline1 += '\\n'\n\tline2 += '\\n'\n\torder = True\n\tfor i in range(n // 2):\n\t\tif order:\n\t\t\tout.append(line1)\n\t\t\tout.append(line2)\n\t\telse:\n\t\t\tout.append(line2)\n\t\t\tout.append(line1)\n\t\torder = not order\nprint(''.join(out))\n",
        "for _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tst = '1 0 '\n\tst_m = '0 1 '\n\tone = ''\n\ttwo = ''\n\tfor i in range(m // 2):\n\t\tif i % 2:\n\t\t\tone += st\n\t\t\ttwo += st_m\n\t\telse:\n\t\t\tone += st_m\n\t\t\ttwo += st\n\tif n == 2:\n\t\tprint(one)\n\t\tprint(two)\n\t\tcontinue\n\tfor i in range(n // 2):\n\t\tif i % 2:\n\t\t\tprint(one)\n\t\t\tprint(two)\n\t\telse:\n\t\t\tprint(two)\n\t\t\tprint(one)\n",
        "t = int(input())\nfor _ in range(t):\n\t(n, m) = map(int, input().split())\n\ta = '01'\n\tb = '10'\n\tms = ''\n\tns = ''\n\tfor i in range(m // 2):\n\t\tif i % 2 == 0:\n\t\t\tms = ms + a\n\t\t\tns = ns + b\n\t\telse:\n\t\t\tms = ms + b\n\t\t\tns = ns + a\n\tfor j in range(n // 2):\n\t\tif j % 2 == 0:\n\t\t\tprint(' '.join(list(ms)))\n\t\t\tprint(' '.join(list(ns)))\n\t\telse:\n\t\t\tprint(' '.join(list(ns)))\n\t\t\tprint(' '.join(list(ms)))\n",
        "ncase = int(input())\nfor case in range(1, ncase + 1):\n\t(n, m) = [int(s) for s in input().split(' ')]\n\tflag = 0\n\tfor i in range(n):\n\t\tif i % 4 == 0 or i % 4 == 3:\n\t\t\tif m % 4 == 0:\n\t\t\t\tprint(' '.join(['1', '0', '0', '1'] * (m // 4)))\n\t\t\telse:\n\t\t\t\tprint('1 0' + ' 0 1 1 0' * (m // 4))\n\t\telif m % 4 == 0:\n\t\t\tprint(' '.join(['0', '1', '1', '0'] * (m // 4)))\n\t\telse:\n\t\t\tprint('0 1' + ' 1 0 0 1' * (m // 4))\n",
        "for _ in range(int(input())):\n\ta = list(map(int, input().split()))\n\tfor i in range(a[0]):\n\t\tif i % 4 == 0 or i % 4 == 3:\n\t\t\tprint(int(a[1] / 4) * '1 0 0 1 ' + int(a[1] % 4 / 2) * '1 0')\n\t\telse:\n\t\t\tprint(int(a[1] / 4) * '0 1 1 0 ' + int(a[1] % 4 / 2) * '0 1')\n",
        "t = int(input())\nwhile t > 0:\n\t(m, n) = list(map(int, input().split(' ')))\n\tc = ''\n\td = ''\n\ta = '0 1'\n\tb = '1 0'\n\tfor i in range(1, n // 2 + 1):\n\t\tif i % 2 == 0:\n\t\t\tc += b + ' '\n\t\t\td += a + ' '\n\t\telse:\n\t\t\tc += a + ' '\n\t\t\td += b + ' '\n\tfor j in range(1, m // 2 + 1):\n\t\tif j % 2 == 0:\n\t\t\tprint(c)\n\t\t\tprint(d)\n\t\telse:\n\t\t\tprint(d)\n\t\t\tprint(c)\n\tt -= 1\n",
        "import sys\n\ndef solve():\n\t(n, m) = map(int, sys.stdin.readline().split())\n\tpattern1 = '1 0 0 1 '\n\tpattern2 = '0 1 1 0 '\n\tremainder = m % 4 * 2\n\tquotient = m // 4\n\tpattern1 = pattern1 * quotient + pattern1[:remainder]\n\tpattern2 = pattern2 * quotient + pattern2[:remainder]\n\tpattern_type = False\n\tsys.stdout.write(pattern1 + '\\n')\n\tx = 0\n\tfor i in range(1, n):\n\t\tx += 1\n\t\tif pattern_type:\n\t\t\tsys.stdout.write(pattern1 + '\\n')\n\t\telse:\n\t\t\tsys.stdout.write(pattern2 + '\\n')\n\t\tif x == 2:\n\t\t\tpattern_type = not pattern_type\n\t\t\tx = 0\n\ndef main():\n\tt = int(sys.stdin.readline())\n\tfor _ in range(t):\n\t\tsolve()\nmain()\n",
        "tc = int(input())\nwhile tc > 0:\n\tA = [int(i) for i in input().split(' ')]\n\tR1 = ['0', '1']\n\tR2 = ['1', '0']\n\tL1 = ['1', '0']\n\tL2 = ['0', '1']\n\tR3 = ['1', '0']\n\tR4 = ['0', '1']\n\tL3 = ['0', '1']\n\tL4 = ['1', '0']\n\tn = A[0] // 2\n\tm = A[1] // 2\n\tans = []\n\tfor i in range(n):\n\t\tcurr1 = []\n\t\tcurr2 = []\n\t\tif i % 2 == 0:\n\t\t\tfor j in range(m):\n\t\t\t\tif j % 2 == 0:\n\t\t\t\t\tcurr1 += R1\n\t\t\t\t\tcurr2 += R2\n\t\t\t\telse:\n\t\t\t\t\tcurr1 += L1\n\t\t\t\t\tcurr2 += L2\n\t\telse:\n\t\t\tfor j in range(m):\n\t\t\t\tif j % 2 == 0:\n\t\t\t\t\tcurr1 += R3\n\t\t\t\t\tcurr2 += R4\n\t\t\t\telse:\n\t\t\t\t\tcurr1 += L3\n\t\t\t\t\tcurr2 += L4\n\t\tans = ans + [curr1] + [curr2]\n\tfor i in range(2 * n):\n\t\tprint(' '.join(ans[i]))\n\ttc = tc - 1\n",
        "for _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tfor i in range(n // 4):\n\t\tprint('1 0 0 1 ' * (m // 4) + '1 0' * (m % 4 // 2))\n\t\tprint('0 1 1 0 ' * (m // 4) + '0 1' * (m % 4 // 2))\n\t\tprint('0 1 1 0 ' * (m // 4) + '0 1' * (m % 4 // 2))\n\t\tprint('1 0 0 1 ' * (m // 4) + '1 0' * (m % 4 // 2))\n\tif n % 4 == 2:\n\t\tprint('1 0 0 1 ' * (m // 4) + '1 0' * (m % 4 // 2))\n\t\tprint('0 1 1 0 ' * (m // 4) + '0 1' * (m % 4 // 2))\n",
        "num_of_matrixes = int(input())\ndimensions = [tuple(map(int, input().split())) for _ in range(num_of_matrixes)]\n\ndef print_matrix(n, m):\n\tblock_width = m // 2\n\tblock_height = n // 2\n\tbig_result = []\n\tfor row in range(block_height):\n\t\tunit1 = '1 0 '\n\t\tunit2 = '0 1 '\n\t\tstr_1 = []\n\t\tstr_2 = []\n\t\tfor column in range(block_width):\n\t\t\tif row % 2 == 0:\n\t\t\t\tstr_1.append(unit1)\n\t\t\t\tstr_2.append(unit2)\n\t\t\telse:\n\t\t\t\tstr_1.append(unit2)\n\t\t\t\tstr_2.append(unit1)\n\t\t\t(unit1, unit2) = (unit2, unit1)\n\t\tbig_result.append(''.join(str_1)[:-1])\n\t\tbig_result.append(''.join(str_2)[:-1])\n\tfor line in big_result:\n\t\tprint(line)\nfor item in dimensions:\n\tprint_matrix(*item)\n",
        "for _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tA = '11'\n\tB = '00'\n\trow1 = []\n\trow2 = []\n\tfor i in range(m // 2):\n\t\tif i % 2 == 0:\n\t\t\trow1.append(A)\n\t\t\trow2.append(B)\n\t\telse:\n\t\t\trow1.append(B)\n\t\t\trow2.append(A)\n\trow1 = ''.join(row1)\n\trow2 = ''.join(row2)\n\tif row1[-1] == '0':\n\t\trow1 = row1[1:] + '1'\n\telse:\n\t\trow1 = row1[1:] + '0'\n\tif row2[-1] == '0':\n\t\trow2 = row2[1:] + '1'\n\telse:\n\t\trow2 = row2[1:] + '0'\n\tcol = []\n\tfor i in range(n // 2):\n\t\tif i % 2 == 0:\n\t\t\tcol.append(A)\n\t\telse:\n\t\t\tcol.append(B)\n\tcol = ''.join(col)\n\tif col[-1] == '0':\n\t\tcol = col[1:] + '1'\n\telse:\n\t\tcol = col[1:] + '0'\n\tfor el in col:\n\t\tif el == '1':\n\t\t\tprint(' '.join(row1))\n\t\telse:\n\t\t\tprint(' '.join(row2))\n",
        "t = int(input())\nfor _ in range(t):\n\t(n, m) = map(int, input().split())\n\tpairs = ['1 0 ', '0 1 ']\n\trows = ['', '']\n\tfor i in range(m // 2):\n\t\trows[0] += pairs[i % 2]\n\t\trows[1] += pairs[i % 2 - 1]\n\tpair_rows = [rows[0] + '\\n' + rows[1] + '\\n', rows[1] + '\\n' + rows[0] + '\\n']\n\tmatrix = ''\n\tfor i in range(n // 2):\n\t\tmatrix += pair_rows[i % 2]\n\tprint(matrix.strip())\n",
        "for i in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tm //= 2\n\tn //= 2\n\ts = '1 ' + '0 0 1 1 ' * ((m - 1) // 2)\n\tif m % 2 == 0:\n\t\ts += '0 0 1'\n\telse:\n\t\ts += '0'\n\tprint(s)\n\ts1 = ''.join(({'0': '1', '1': '0', ' ': ' '}[c] for c in s))\n\tprint((s1 + '\\n' + s1 + '\\n' + s + '\\n' + s + '\\n') * ((n - 1) // 2), end='')\n\tif n % 2:\n\t\tprint(s1)\n\telse:\n\t\tprint(s1 + '\\n' + s1 + '\\n' + s)\n",
        "t = int(input())\nfor z in range(t):\n\t(n, m) = [int(x) for x in input().split()]\n\tl1 = [1, 0]\n\tl2 = [0, 1]\n\tp = []\n\tq = []\n\ts = ''\n\tr = ''\n\tfor i in range(m // 2):\n\t\tif i % 2 == 0:\n\t\t\tp = p + l1\n\t\t\tq = q + l2\n\t\telse:\n\t\t\tp = p + l2\n\t\t\tq = q + l1\n\tfor i in p:\n\t\tx = str(i)\n\t\ts = s + x + ' '\n\tfor i in q:\n\t\ty = str(i)\n\t\tr = r + y + ' '\n\tprint(s)\n\tfor i in range((n - 2) // 2):\n\t\tif i % 2 == 0:\n\t\t\tprint(r)\n\t\t\tprint(r)\n\t\telse:\n\t\t\tprint(s)\n\t\t\tprint(s)\n\tif n % 4 == 0:\n\t\tprint(s)\n\telse:\n\t\tprint(r)\n",
        "a = int(input())\nfor i in range(a):\n\tb = list(map(int, input().split()))\n\trow = b[1]\n\tmain = '1 0 0 1 '\n\tst = ''\n\tde = row % 4\n\tse = row // 4\n\tst += main * se\n\tif de == 1:\n\t\tst += '1'\n\tif de == 2:\n\t\tst += '1 0'\n\tif de == 3:\n\t\tst += '1 0 0'\n\tcolumn = st.replace('0', '2')\n\tcolumn = column.replace('1', '0')\n\tcolumn = column.replace('2', '1')\n\tm = 1\n\tfinal = ''\n\tfor k in range(b[0]):\n\t\tif k % 2 != 0:\n\t\t\tfinal += st + '\\n'\n\t\t\tm = 1\n\t\telse:\n\t\t\tfinal += column + '\\n'\n\t\t\tm = 0\n\t\tif m == 1:\n\t\t\tsd = st\n\t\t\tst = column\n\t\t\tcolumn = sd\n\tprint(final[:-1])\n",
        "for _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tpt1 = [1, 0]\n\tpt2 = [0, 1]\n\tsave1 = []\n\tsave2 = []\n\tp1 = ''\n\tp2 = ''\n\tfor i in range(m // 2):\n\t\tif i % 2 == 0:\n\t\t\tsave1 += pt1\n\t\t\tsave2 += pt2\n\t\telse:\n\t\t\tsave1 += pt2\n\t\t\tsave2 += pt1\n\tp1 = ' '.join(map(str, save1))\n\tp2 = ' '.join(map(str, save2))\n\tprint(p1)\n\tfor i in range((n - 2) // 2):\n\t\tif i % 2 == 0:\n\t\t\tprint(p2)\n\t\t\tprint(p2)\n\t\telse:\n\t\t\tprint(p1)\n\t\t\tprint(p1)\n\tif n % 4 == 0:\n\t\tprint(p1)\n\telse:\n\t\tprint(p2)\n",
        "for _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tif m % 4 == 0:\n\t\tfirst = '0 1 1 0 ' * (m // 4)\n\t\tsecond = '1 0 0 1 ' * (m // 4)\n\telif m == 2:\n\t\tfirst = '0 1'\n\t\tsecond = '1 0'\n\telse:\n\t\tfirst = '0 1 1 0 ' * (m // 4) + '0 1 '\n\t\tsecond = '1 0 0 1 ' * (m // 4) + '1 0 '\n\tif n % 4 != 0:\n\t\tprint(first)\n\t\tfor i in range((n - 2) // 4):\n\t\t\tprint(second)\n\t\t\tprint(second)\n\t\t\tprint(first)\n\t\t\tprint(first)\n\t\tprint(second)\n\telse:\n\t\tprint(first)\n\t\tfor i in range((n - 4) // 4):\n\t\t\tprint(second)\n\t\t\tprint(second)\n\t\t\tprint(first)\n\t\t\tprint(first)\n\t\tprint(second)\n\t\tprint(second)\n\t\tprint(first)\n",
        "def criarMatriz(n, m):\n\tpadrao1 = '1 0 '\n\tpadrao2 = '0 1 '\n\tcntlin = True\n\tcntCol = 0\n\tlinhaMult3 = ''\n\toutrasLinhas = ''\n\tfor i in range(m // 2):\n\t\tif cntlin:\n\t\t\tlinhaMult3 += padrao1\n\t\t\toutrasLinhas += padrao2\n\t\telse:\n\t\t\tlinhaMult3 += padrao2\n\t\t\toutrasLinhas += padrao1\n\t\tcntlin = not cntlin\n\tlinhaMult3 = linhaMult3.strip()\n\toutrasLinhas = outrasLinhas.strip()\n\tfor i in range(n):\n\t\tif i % 4 == 0 or i % 4 == 3:\n\t\t\tprint(linhaMult3)\n\t\telse:\n\t\t\tprint(outrasLinhas)\nnumCase = int(input())\nfor i in range(numCase):\n\tnm = list(map(int, input().split(' ')))\n\tcriarMatriz(nm[0], nm[1])\n",
        "def generate_line(current, columns):\n\tline = []\n\tfor _ in range(columns // 2):\n\t\tif current:\n\t\t\tline += '1'\n\t\t\tline += '0'\n\t\telse:\n\t\t\tline += '0'\n\t\t\tline += '1'\n\t\tcurrent = not current\n\treturn ' '.join(line)\nn = int(input())\nfor _ in range(n):\n\t(rows, columns) = [int(x) for x in input().split()]\n\tfor row in range(rows // 2):\n\t\tstart = True\n\t\tif row % 2 != 0:\n\t\t\tstart = False\n\t\tprint(generate_line(start, columns))\n\t\tprint(generate_line(not start, columns))\n",
        "t = int(input())\nfor _ in range(t):\n\t(h, w) = map(int, input().split())\n\ta = ''\n\tb = ''\n\tfor i in range(1, w // 2 + 1):\n\t\tif i % 2 == 0:\n\t\t\ta += '1 0 '\n\t\t\tb += '0 1 '\n\t\telse:\n\t\t\ta += '0 1 '\n\t\t\tb += '1 0 '\n\tfor i in range(1, h // 2 + 1):\n\t\tif i % 2 == 0:\n\t\t\tprint(b)\n\t\t\tprint(a)\n\t\telse:\n\t\t\tprint(a)\n\t\t\tprint(b)\n",
        "t = int(input())\nfor _ in range(t):\n\t(n, m) = (int(ii) for ii in input().split())\n\t(a, b) = ('0 1', '1 0')\n\tfor i in range(m // 2 - 1):\n\t\tif i % 2 == 0:\n\t\t\ta += ' 1 0'\n\t\t\tb += ' 0 1'\n\t\telse:\n\t\t\ta += ' 0 1'\n\t\t\tb += ' 1 0'\n\tfor j in range(n // 2):\n\t\tif j % 2 == 0:\n\t\t\tprint(a)\n\t\t\tprint(b)\n\t\telse:\n\t\t\tprint(b)\n\t\t\tprint(a)\n",
        "n = int(input())\nwhile n:\n\t(a, b) = map(int, input().split())\n\trow = [0]\n\tfor i in range(b // 2 - 1):\n\t\trow.append((row[-1] + 1) % 2)\n\tfor i in range(a // 2):\n\t\toutput = [[], []]\n\t\tnrow = []\n\t\tfor v in row:\n\t\t\tif v == 0:\n\t\t\t\toutput[0] += ['0', '1']\n\t\t\t\toutput[1] += ['1', '0']\n\t\t\t\tnrow.append(1)\n\t\t\telse:\n\t\t\t\toutput[1] += ['0', '1']\n\t\t\t\toutput[0] += ['1', '0']\n\t\t\t\tnrow.append(0)\n\t\tprint(' '.join(output[0]))\n\t\tprint(' '.join(output[1]))\n\t\trow = nrow\n\tn -= 1\n",
        "for i in range(int(input())):\n\t(n, m) = input().split()\n\tn = int(n)\n\tm = int(m)\n\tinversed = False\n\tfor k in range(int(n / 2)):\n\t\tif inversed:\n\t\t\ts = ''\n\t\t\tfor j in range(int(m / 2)):\n\t\t\t\tif j % 2 == 0:\n\t\t\t\t\ts = s + '1 0 '\n\t\t\t\telse:\n\t\t\t\t\ts = s + '0 1 '\n\t\t\tprint(s[:-1])\n\t\t\ts = ''\n\t\t\tfor j in range(int(m / 2)):\n\t\t\t\tif j % 2 == 0:\n\t\t\t\t\ts = s + '0 1 '\n\t\t\t\telse:\n\t\t\t\t\ts = s + '1 0 '\n\t\t\tprint(s[:-1])\n\t\t\tinversed = False\n\t\telse:\n\t\t\ts = ''\n\t\t\tfor j in range(int(m / 2)):\n\t\t\t\tif j % 2 == 0:\n\t\t\t\t\ts = s + '0 1 '\n\t\t\t\telse:\n\t\t\t\t\ts = s + '1 0 '\n\t\t\tprint(s[:-1])\n\t\t\ts = ''\n\t\t\tfor j in range(int(m / 2)):\n\t\t\t\tif j % 2 == 0:\n\t\t\t\t\ts = s + '1 0 '\n\t\t\t\telse:\n\t\t\t\t\ts = s + '0 1 '\n\t\t\tprint(s[:-1])\n\t\t\tinversed = True\n",
        "for _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tpat1 = [1, 0]\n\tpat2 = [0, 1]\n\tcur1 = []\n\tfor j in range(0, m, 2):\n\t\tcur1 += pat1\n\t\tpat1 = pat1[::-1]\n\tcur2 = []\n\tfor j in range(0, m, 2):\n\t\tcur2 += pat2\n\t\tpat2 = pat2[::-1]\n\tans = []\n\tans.append(cur1)\n\tpath = -1\n\tfor i in range(1, n - 1, 2):\n\t\tans.append(cur1 if path == 1 else cur2)\n\t\tans.append(cur1 if path == 1 else cur2)\n\t\tpath *= -1\n\tans.append(cur1 if n % 4 == 0 else cur2)\n\tfor row in ans:\n\t\tprint(' '.join([str(i) for i in row]))\n",
        "t = int(input())\nfor _ in range(t):\n\t(n, m) = map(int, input().split())\n\tpattern = [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]]\n\trepeatHor = m // 4\n\textraHor = False\n\tif m % 4 == 2:\n\t\textraHor = True\n\trepeatVert = n // 4\n\textraVert = False\n\tif n % 4 == 2:\n\t\textraVert = True\n\tline1 = '0 1 1 0 ' * repeatHor\n\tif extraHor:\n\t\tline1 += '0 1'\n\tline2 = '1 0 0 1 ' * repeatHor\n\tif extraHor:\n\t\tline2 += '1 0'\n\tline3 = '1 0 0 1 ' * repeatHor\n\tif extraHor:\n\t\tline3 += '1 0'\n\tline4 = '0 1 1 0 ' * repeatHor\n\tif extraHor:\n\t\tline4 += '0 1'\n\tfor i in range(repeatVert):\n\t\tprint(line1)\n\t\tprint(line2)\n\t\tprint(line3)\n\t\tprint(line4)\n\tif extraVert:\n\t\tprint(line1)\n\t\tprint(line2)\n",
        "t = int(input())\nwhile t:\n\tt = t - 1\n\t(n, m) = map(int, input().split())\n\tres = []\n\tfor j in range(2):\n\t\tst = ''\n\t\tfor i in range(m):\n\t\t\tif j == 0:\n\t\t\t\tff = '1 '\n\t\t\telse:\n\t\t\t\tff = '0 '\n\t\t\tif i == 0:\n\t\t\t\tst += ff\n\t\t\t\tif ff == '1 ':\n\t\t\t\t\tss = '0 '\n\t\t\t\telse:\n\t\t\t\t\tss = '1 '\n\t\t\t\tcnt = 0\n\t\t\telse:\n\t\t\t\tif cnt == 2:\n\t\t\t\t\tif ss == '0 ':\n\t\t\t\t\t\tss = '1 '\n\t\t\t\t\telse:\n\t\t\t\t\t\tss = '0 '\n\t\t\t\t\tcnt = 0\n\t\t\t\tst += ss\n\t\t\t\tcnt += 1\n\t\tst = st.strip()\n\t\tres.append(st)\n\tmat = []\n\tfor i in range(n):\n\t\tif i == 0:\n\t\t\tmat.append(res[0])\n\t\t\tcnt = 0\n\t\t\tcc = 1\n\t\telse:\n\t\t\tif cnt == 2:\n\t\t\t\tif cc == 1:\n\t\t\t\t\tcc = 0\n\t\t\t\telse:\n\t\t\t\t\tcc = 1\n\t\t\t\tcnt = 0\n\t\t\tmat.append(res[cc])\n\t\t\tcnt += 1\n\tfor i in mat:\n\t\tprint(i)\n",
        "def task(n, m):\n\tgrid = []\n\tfor i in range(0, n):\n\t\trow = []\n\t\tfor j in range(0, m):\n\t\t\ta = i % 4\n\t\t\tb = j % 4\n\t\t\tif a == b or b + a == 3:\n\t\t\t\trow.append('1')\n\t\t\telse:\n\t\t\t\trow.append('0')\n\t\tprint(' '.join(row))\nt = int(input())\nfor i in range(0, t):\n\t(n, m) = list(map(int, input().split()))\n\ttask(n, m)\n",
        "for _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tp = '1'\n\tpp = '0'\n\ts1 = ''\n\ts2 = ''\n\tfor i in range(m):\n\t\tif pp == '0' and p == '1':\n\t\t\ts1 += ' 1'\n\t\t\tpp = '1'\n\t\telif pp == '0' and p == '0':\n\t\t\ts1 += ' 1'\n\t\t\tp = '1'\n\t\telif pp == '1' and p == '0':\n\t\t\ts1 += ' 0'\n\t\t\tpp = '0'\n\t\telif pp == '1' and p == '1':\n\t\t\ts1 += ' 0'\n\t\t\tp = '0'\n\tp = '0'\n\tpp = '1'\n\tfor i in range(m):\n\t\tif pp == '0' and p == '1':\n\t\t\ts2 += ' 1'\n\t\t\tpp = '1'\n\t\telif pp == '0' and p == '0':\n\t\t\ts2 += ' 1'\n\t\t\tp = '1'\n\t\telif pp == '1' and p == '0':\n\t\t\ts2 += ' 0'\n\t\t\tpp = '0'\n\t\telif pp == '1' and p == '1':\n\t\t\ts2 += ' 0'\n\t\t\tp = '0'\n\tp = '1'\n\tpp = '0'\n\ts1 = s1.strip()\n\ts2 = s2.strip()\n\tfor i in range(n):\n\t\tif pp == '0' and p == '1':\n\t\t\tprint(s1)\n\t\t\tpp = '1'\n\t\telif pp == '0' and p == '0':\n\t\t\tprint(s1)\n\t\t\tp = '1'\n\t\telif pp == '1' and p == '0':\n\t\t\tprint(s2)\n\t\t\tpp = '0'\n\t\telif pp == '1' and p == '1':\n\t\t\tprint(s2)\n\t\t\tp = '0'\n",
        "b = {0: [['1', '0'], ['0', '1']], 1: [['0', '1'], ['1', '0']]}\nt = int(input().strip())\nfor _ in range(t):\n\t(n, m) = [int(i) for i in input().strip().split()]\n\tfor i in range(n // 2):\n\t\tl = i % 2\n\t\tl1 = []\n\t\tl2 = []\n\t\tfor j in range(m // 2):\n\t\t\ts = b[(l + j) % 2]\n\t\t\tl1 += s[0]\n\t\t\tl2 += s[1]\n\t\tprint(' '.join(l1))\n\t\tprint(' '.join(l2))\n",
        "def main():\n\tseq = '1001'\n\tps = [0, 2, 2, 0]\n\tN = int(input())\n\tfor _ in range(N):\n\t\t(h, w) = map(int, input().split())\n\t\tmat = [[None] * w for _ in range(h)]\n\t\tfor r in range(h):\n\t\t\ti = ps[r % 4]\n\t\t\tc = 0\n\t\t\twhile c < w:\n\t\t\t\tmat[r][c] = seq[i]\n\t\t\t\tc += 1\n\t\t\t\ti = (i + 1) % len(seq)\n\t\tfor r in range(h):\n\t\t\tprint(' '.join(mat[r]))\n\ndef init():\n\timport os\n\timport sys\n\tsys.setrecursionlimit(2 * 10 ** 6)\n\tif 'CP_LOCAL_ENV' in os.environ:\n\t\tsys.stdin = open('cf_test_b.txt')\ninit()\nmain()\n",
        "for _ in range(int(input())):\n\t(m, n) = map(int, input().split())\n\tpat1 = [1, 0]\n\tpat2 = [0, 1]\n\tr1 = (pat1 + pat2) * (n // 4) + pat1 * (n % 4 == 2)\n\tr2 = (pat2 + pat1) * (n // 4) + pat2 * (n % 4 == 2)\n\tfor i in range(m):\n\t\tif i % 4 == 1 or i % 4 == 2:\n\t\t\tprint(' '.join(map(str, r2)))\n\t\telse:\n\t\t\tprint(' '.join(map(str, r1)))\n",
        "for _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\ta = [[0 for j in range(m)] for i in range(n)]\n\tfor i in range(n // 2):\n\t\tfor j in range(m // 2):\n\t\t\tif (i + j) % 2 == 0:\n\t\t\t\ta[2 * i][2 * j] = '1'\n\t\t\t\ta[2 * i][2 * j + 1] = '0'\n\t\t\t\ta[2 * i + 1][2 * j] = '0'\n\t\t\t\ta[2 * i + 1][2 * j + 1] = '1'\n\t\t\telse:\n\t\t\t\ta[2 * i][2 * j] = '0'\n\t\t\t\ta[2 * i][2 * j + 1] = '1'\n\t\t\t\ta[2 * i + 1][2 * j] = '1'\n\t\t\t\ta[2 * i + 1][2 * j + 1] = '0'\n\tfor i in range(n):\n\t\tprint(' '.join(a[i]))\n",
        "import sys\nimport string\nfrom decimal import Decimal\nfrom math import log\n\ndef inp():\n\treturn int(input())\n\ndef inplist():\n\treturn list(map(int, input().split()))\n\ndef inpstrlist():\n\ts = input()\n\treturn list(s[:len(s)])\n\ndef invr():\n\treturn map(int, input().split())\nt = int(input())\nfor _ in range(t):\n\t(n, m) = invr()\n\tfirst = '1 0 0 1 ' * 20\n\tsecond = '0 1 1 0 ' * 20\n\tthird = '0 1 1 0 ' * 20\n\tfourth = '1 0 0 1 ' * 20\n\tfor i in range(n):\n\t\tif i % 4 == 0:\n\t\t\tprint(first[:2 * m])\n\t\telif i % 4 == 1:\n\t\t\tprint(second[:2 * m])\n\t\telif i % 4 == 2:\n\t\t\tprint(third[:2 * m])\n\t\telse:\n\t\t\tprint(fourth[:2 * m])\n",
        "for _ in range(int(input())):\n\t(m, n) = [int(a) for a in input().split()]\n\tarr = [['0'] * n for i in range(m)]\n\tfor i in range(m):\n\t\tfor j in range(n):\n\t\t\tif i % 4 in [0, 3] and j % 4 in [0, 3] or (i % 4 in [1, 2] and j % 4 in [1, 2]):\n\t\t\t\tarr[i][j] = '1'\n\t\tprint(' '.join(arr[i]))\n",
        "import sys\nd = (((0, 0), (1, 1)), ((1, 0), (0, 1)))\ninputs = sys.stdin.readlines()\nfor i in range(1, len(inputs)):\n\t(n, m) = map(int, inputs[i].split())\n\tboard = [['0' for _ in range(m)] for _ in range(n)]\n\tfor i in range(0, n, 2):\n\t\tdi = i // 2 % 2\n\t\tfor j in range(0, m, 2):\n\t\t\tfor dd in d[di]:\n\t\t\t\tboard[i + dd[0]][j + dd[1]] = '1'\n\t\t\tdi = (di + 1) % 2\n\tfor b in board:\n\t\tsys.stdout.write(' '.join(b) + '\\n')\n",
        "def solve():\n\todd_pattern = [1, 0, 0, 1]\n\teven_pattern = [0, 1, 1, 0]\n\trow_pattern = [1, 0, 0, 1]\n\tnum_tests = int(input())\n\tfor t in range(num_tests):\n\t\t(rows, cols) = map(int, input().split())\n\t\tif rows == 2 and cols == 2:\n\t\t\tprint('1 0')\n\t\t\tprint('0 1')\n\t\telse:\n\t\t\tfor n in range(rows):\n\t\t\t\tnew_row = []\n\t\t\t\tfor m in range(cols):\n\t\t\t\t\tif row_pattern[n % 4] == 1:\n\t\t\t\t\t\tnum = even_pattern[m % 4]\n\t\t\t\t\telse:\n\t\t\t\t\t\tnum = odd_pattern[m % 4]\n\t\t\t\t\tnew_row.append(str(num))\n\t\t\t\tprint(' '.join(new_row))\nsolve()\n",
        "n = int(input())\ntest_cases = []\nfor i in range(n):\n\ttest_cases.append([int(i) for i in input().split()])\nfor test_case in test_cases:\n\t(l, m) = test_case\n\tmatrix = [[0 for _ in range(m)] for _ in range(l)]\n\tmatrix[0][0] = 1\n\tmatrix[1][1] = 1\n\tfor i in range(1, int(m / 2)):\n\t\tmatrix[0][1 + i * 2] = matrix[0][(i - 1) * 2]\n\t\tmatrix[1][0 + i * 2] = matrix[1][(i - 1) * 2 + 1]\n\t\tmatrix[1][1 + i * 2] = matrix[1][(i - 1) * 2]\n\t\tmatrix[0][0 + i * 2] = matrix[0][(i - 1) * 2 + 1]\n\tfor i in range(1, int(l / 2)):\n\t\tmatrix[i * 2] = matrix[(i - 1) * 2 + 1]\n\t\tmatrix[i * 2 + 1] = matrix[(i - 1) * 2]\n\tfor i in range(len(matrix)):\n\t\tprint(' '.join(map(str, matrix[i])))\n",
        "def solve():\n\t(n, m) = map(int, input().split())\n\tans = [[0] * m for _ in range(n)]\n\tfor i in range(0, n, 2):\n\t\tfor j in range(0, m, 2):\n\t\t\tif (i // 2 + j // 2) % 2 == 0:\n\t\t\t\tans[i + 1][j] = 1\n\t\t\t\tans[i][j + 1] = 1\n\t\t\telse:\n\t\t\t\tans[i][j] = 1\n\t\t\t\tans[i + 1][j + 1] = 1\n\tfor a in ans:\n\t\tprint(' '.join((str(x) for x in a)))\nfor _ in range(int(input())):\n\tsolve()\n",
        "t = int(input())\npattern1 = [1, 0, 0, 1] * 20\npattern2 = [0, 1, 1, 0] * 20\n\ndef f(m, n):\n\tfor i in range(m):\n\t\tl = pattern1[:n] if i % 4 in [0, 3] else pattern2[:n]\n\t\tprint(' '.join(map(str, l)))\nfor _ in range(t):\n\t(m, n) = map(int, input().split())\n\tf(m, n)\n",
        "import io, os, sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\t(n, m) = map(int, input().split())\n\trow = [1, 0]\n\tfor j in range(2, m):\n\t\tif j % 2 == 0:\n\t\t\trow.append(row[-1])\n\t\telse:\n\t\t\trow.append(row[-1] ^ 1)\n\tfor i in range(n):\n\t\tprint(' '.join([str(r) for r in row]))\n\t\tif i % 2 == 0:\n\t\t\trow = [r ^ 1 for r in row]\n",
        "testcases = int(input())\nfor _ in range(testcases):\n\t(cols, rows) = list(map(int, input().split()))\n\tans = [[0 for i in range(rows)] for j in range(cols)]\n\tcolumn = len(ans[0])\n\trows = len(ans)\n\tfor row in range(0, rows, 2):\n\t\tfor col in range(0, column, 2):\n\t\t\tif (row + col) % 4 == 0:\n\t\t\t\tans[row][col] = str(0)\n\t\t\t\tans[row + 1][col] = str(1)\n\t\t\t\tans[row][col + 1] = str(1)\n\t\t\t\tans[row + 1][col + 1] = str(0)\n\t\t\telse:\n\t\t\t\tans[row][col] = str(1)\n\t\t\t\tans[row + 1][col] = str(0)\n\t\t\t\tans[row][col + 1] = str(0)\n\t\t\t\tans[row + 1][col + 1] = str(1)\n\tans = [' '.join(num) for num in ans]\n\tprint('\\n'.join(ans))\n",
        "tests = int(input())\nfor i in range(0, tests):\n\t(n, m) = map(int, input().split()[:2])\n\tboard = list()\n\tcount = 0\n\tturn = 1\n\tfor t in range(0, n):\n\t\tnew_line = list()\n\t\tfor i in range(0, int(m / 2)):\n\t\t\tif t == 0 or turn == 0:\n\t\t\t\tif i % 2 == 0:\n\t\t\t\t\tnew_line.append(0)\n\t\t\t\t\tnew_line.append(1)\n\t\t\t\telse:\n\t\t\t\t\tnew_line.append(1)\n\t\t\t\t\tnew_line.append(0)\n\t\t\telif i % 2 == 0:\n\t\t\t\tnew_line.append(1)\n\t\t\t\tnew_line.append(0)\n\t\t\telse:\n\t\t\t\tnew_line.append(0)\n\t\t\t\tnew_line.append(1)\n\t\tif t == 0 or count <= 2:\n\t\t\tcount = count + 1\n\t\tif count > 2:\n\t\t\tif turn == 1:\n\t\t\t\tturn = 0\n\t\t\telse:\n\t\t\t\tturn = 1\n\t\t\tcount = 1\n\t\tboard.append(new_line)\n\tfor j in board:\n\t\tprint(' '.join(map(str, j)))\n",
        "a = int(input())\nju = [[1, 0, 0, 1], [0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1]]\nfor i in range(a):\n\t(n, m) = map(int, input().split())\n\tfor j in range(n):\n\t\tans = []\n\t\tfor k in range(m):\n\t\t\tans.append(str(ju[j % 4][k % 4]))\n\t\tprint(' '.join(ans))\n",
        "t = int(input())\nwhile t > 0:\n\tt = t - 1\n\t(n, m) = [int(i) for i in input().split()]\n\tk = 0\n\tp = 0\n\tif n >= 4:\n\t\tfor i in range(0, n // 4, 1):\n\t\t\tif m >= 4:\n\t\t\t\tfor j in range(0, m // 4, 1):\n\t\t\t\t\tprint('1 0 0 1 ', end='')\n\t\t\tif m % 4 != 0:\n\t\t\t\tprint('1 0 ', end='')\n\t\t\tprint('\\n')\n\t\t\tif m >= 4:\n\t\t\t\tfor j in range(0, m // 4, 1):\n\t\t\t\t\tprint('0 1 1 0 ', end='')\n\t\t\tif m % 4 != 0:\n\t\t\t\tprint('0 1 ', end='')\n\t\t\tprint('\\n')\n\t\t\tif m >= 4:\n\t\t\t\tfor j in range(0, m // 4, 1):\n\t\t\t\t\tprint('0 1 1 0 ', end='')\n\t\t\tif m % 4 != 0:\n\t\t\t\tprint('0 1 ', end='')\n\t\t\tprint('\\n')\n\t\t\tif m >= 4:\n\t\t\t\tfor j in range(0, m // 4, 1):\n\t\t\t\t\tprint('1 0 0 1 ', end='')\n\t\t\tif m % 4 != 0:\n\t\t\t\tprint('1 0 ', end='')\n\t\t\tprint('\\n')\n\tif n % 4 != 0:\n\t\tif m >= 4:\n\t\t\tfor j in range(0, m // 4, 1):\n\t\t\t\tprint('1 0 0 1 ', end='')\n\t\tif m % 4 != 0:\n\t\t\tprint('1 0 ', end='')\n\t\tprint('\\n')\n\t\tif m >= 4:\n\t\t\tfor j in range(0, m // 4, 1):\n\t\t\t\tprint('0 1 1 0 ', end='')\n\t\tif m % 4 != 0:\n\t\t\tprint('0 1 ', end='')\n\t\tprint('\\n')\n",
        "def GenerateMatrix(n, m):\n\tmatrix = list()\n\tbaseMatrix = [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]]\n\tfor i in range(n):\n\t\tmatrix.append(list())\n\t\tfor j in range(m):\n\t\t\tmatrix[i].append(baseMatrix[i % 4][j % 4])\n\treturn matrix\n\ndef ShowMatrix(matrix):\n\tfor i in range(len(matrix)):\n\t\tprint(' '.join([str(el) for el in matrix[i]]))\n\ndef GetNeigboursCount(matrix, i, j):\n\tn = len(matrix)\n\tm = len(matrix[0])\n\town = matrix[i][j]\n\tcount = 0\n\tif i - 1 >= 0 and matrix[i - 1][j] != own:\n\t\tcount += 1\n\tif i + 1 < n and matrix[i + 1][j] != own:\n\t\tcount += 1\n\tif j - 1 >= 0 and matrix[i][j - 1] != own:\n\t\tcount += 1\n\tif j + 1 < m and matrix[i][j + 1] != own:\n\t\tcount += 1\n\treturn count\n\ndef CheckMatrix(matrix):\n\tn = len(matrix)\n\tm = len(matrix[0])\n\tnewMatrix = matrix\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif GetNeigboursCount(matrix, i, j) != 2:\n\t\t\t\tnewMatrix[i][j] = 3 if matrix[i][j] == 0 else 4\n\tShowMatrix(newMatrix)\nn = int(input())\nfor i in range(n):\n\t(x, y) = [int(i) for i in input().split()]\n\tmatrix = GenerateMatrix(x, y)\n\tShowMatrix(matrix)\n",
        "def fu():\n\treturn map(int, input().split(' '))\n\ndef kil_(nm):\n\t(n, m) = nm\n\tAA = ''\n\tfor i in range(n):\n\t\tA = ''\n\t\tfor j in range(m):\n\t\t\tif j % 2 == (i + int(j / 2) + int(i / 2)) % 2:\n\t\t\t\tA += '1' + ' '\n\t\t\telse:\n\t\t\t\tA += '0' + ' '\n\t\tAA += A[:-1] + '\\n'\n\treturn AA[:-1]\n\ndef kil(a):\n\tt = int(input())\n\tA = ''\n\tfor i in range(t):\n\t\tA += kil_(a()) + '\\n'\n\tprint(A[:-1])\nkil(fu)\n",
        "n = int(input())\nfor i in range(n):\n\t(a, b) = map(int, input().split())\n\ta //= 2\n\tb //= 2\n\tl = ['1 0', '0 1', '0 1', '1 0']\n\tfor i in range(2 * a):\n\t\tfor j in range(b):\n\t\t\tprint(l[(i + 2 * j) % 4], end=' ')\n\t\tprint()\n",
        "for _ in range(int(input())):\n\t(n, m) = list(map(int, input().split()))\n\ta = [[1 if i % 4 in [0, 3] and j % 4 in [0, 3] or (i % 4 in [1, 2] and j % 4 in [1, 2]) else 0 for j in range(m)] for i in range(n)]\n\tfor i in range(n):\n\t\tprint(' '.join((str(j) for j in a[i])))\n",
        "C = int(input())\nwhile C:\n\t(n, m) = map(int, input().split())\n\tboard = [[0 for c in range(m)] for r in range(n)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif i == 0:\n\t\t\t\tif j % 4 == 0 or j % 4 == 3:\n\t\t\t\t\tboard[i][j] = '1'\n\t\t\t\telse:\n\t\t\t\t\tboard[i][j] = '0'\n\t\t\telif i % 2 == 1:\n\t\t\t\tif board[i - 1][j] == '1':\n\t\t\t\t\tboard[i][j] = '0'\n\t\t\t\telse:\n\t\t\t\t\tboard[i][j] = '1'\n\t\t\telif i % 2 == 0:\n\t\t\t\tif board[i - 1][j] == '0':\n\t\t\t\t\tboard[i][j] = '0'\n\t\t\t\telse:\n\t\t\t\t\tboard[i][j] = '1'\n\t\tprint(' '.join(board[i]))\n\tC -= 1\n",
        "T = int(input())\nfor t in range(T):\n\t(r, c) = map(int, input().split())\n\tmarker = 0\n\tmark = [None] * r\n\tmark[0] = marker\n\tstart = 0\n\tr_marker = 1 - marker\n\tfor i in range(1, r - 1):\n\t\tif start < 2:\n\t\t\tmark[i] = r_marker\n\t\t\tstart += 1\n\t\telse:\n\t\t\tr_marker = 1 - r_marker\n\t\t\tmark[i] = r_marker\n\t\t\tstart = 1\n\tmark[-1] = 1 - mark[-2]\n\tfor i in range(r):\n\t\tresult = [None] * c\n\t\tresult[0] = str(mark[i])\n\t\tr_start = 0\n\t\tr_marker = 1 - mark[i]\n\t\tfor j in range(1, c - 1):\n\t\t\tif r_start < 2:\n\t\t\t\tresult[j] = str(r_marker)\n\t\t\t\tr_start += 1\n\t\t\telse:\n\t\t\t\tr_marker = 1 - r_marker\n\t\t\t\tresult[j] = str(r_marker)\n\t\t\t\tr_start = 1\n\t\tresult[-1] = str(1 - int(result[-2]))\n\t\tprint(' '.join(result))\n",
        "for i in range(int(input())):\n\t(a, b) = map(int, input().split())\n\tfor j in range(a):\n\t\tfor k in range(b // 2):\n\t\t\tif (j % 4 == 0 or j % 4 == 3) and k % 2 == 0 or ((j % 4 == 2 or j % 4 == 1) and k % 2 == 1):\n\t\t\t\tprint('1 0', end=' ')\n\t\t\telse:\n\t\t\t\tprint('0 1', end=' ')\n\t\tprint()\n",
        "test = int(input())\na = '0 1'\nb = '1 0'\nfor i in range(test):\n\t[height, length] = map(int, input().split())\n\tdd = 0\n\tfor k in range(height):\n\t\tif k % 2 != 0:\n\t\t\tdd += 1\n\t\tfor j in range(int(length / 2)):\n\t\t\tif (j + dd) % 2 == 0:\n\t\t\t\tprint(a, end=' ')\n\t\t\t\tcontinue\n\t\t\tprint(b, end=' ')\n\t\tprint()\n",
        "t = int(input())\nfor _ in range(t):\n\t(n, m) = [int(x) // 2 for x in input().split()]\n\tsub_matrix_even = ['1 0 ', '0 1 ']\n\tsub_matrix_odd = ['0 1 ', '1 0 ']\n\tfor j in range(n):\n\t\tfor i in range(m):\n\t\t\tif (i + j) % 2 == 0:\n\t\t\t\tprint(sub_matrix_even[0], end='')\n\t\t\telse:\n\t\t\t\tprint(sub_matrix_odd[0], end='')\n\t\tprint()\n\t\tfor i in range(m):\n\t\t\tif (i + j) % 2 == 0:\n\t\t\t\tprint(sub_matrix_even[1], end='')\n\t\t\telse:\n\t\t\t\tprint(sub_matrix_odd[1], end='')\n\t\tprint()\n",
        "t = int(input())\noptions = [[[1, 0], [0, 1]], [[0, 1], [1, 0]]]\nfor _ in range(t):\n\t[n, m] = [int(c) for c in input().split()]\n\tans = [[0 for _ in range(m)] for _ in range(n)]\n\tfor i in range(0, n, 2):\n\t\tfor j in range(0, m, 2):\n\t\t\top = options[int((i / 2 + j / 2) % 2)]\n\t\t\tans[i][j:j + 2] = op[0]\n\t\t\tans[i + 1][j:j + 2] = op[1]\n\tfor row in ans:\n\t\tprint(' '.join([str(a) for a in row]))\n",
        "for _ in range(int(input())):\n\t(n, m) = [int(_) for _ in input().split()]\n\tten = '1 0'\n\tone = '0 1'\n\tfor i in range(0, n, 2):\n\t\tif i % 4 == 0 or i % 4 == 3:\n\t\t\tfor j in range(0, m // 2):\n\t\t\t\tif j % 2 == 0:\n\t\t\t\t\tprint(ten, end=' ')\n\t\t\t\telse:\n\t\t\t\t\tprint(one, end=' ')\n\t\t\tprint()\n\t\t\tfor j in range(0, m // 2):\n\t\t\t\tif j % 2 == 0:\n\t\t\t\t\tprint(one, end=' ')\n\t\t\t\telse:\n\t\t\t\t\tprint(ten, end=' ')\n\t\t\tprint()\n\t\telse:\n\t\t\tfor j in range(0, m // 2):\n\t\t\t\tif j % 2 == 0:\n\t\t\t\t\tprint(one, end=' ')\n\t\t\t\telse:\n\t\t\t\t\tprint(ten, end=' ')\n\t\t\tprint()\n\t\t\tfor j in range(0, m // 2):\n\t\t\t\tif j % 2 == 0:\n\t\t\t\t\tprint(ten, end=' ')\n\t\t\t\telse:\n\t\t\t\t\tprint(one, end=' ')\n\t\t\tprint()\n",
        "t = int(input())\nfor _ in range(t):\n\t(row, col) = list(map(int, input().split()))\n\tfor j in range(row // 2):\n\t\tif j % 2 == 0:\n\t\t\tgroup = col // 2\n\t\t\ti = 0\n\t\t\twhile group:\n\t\t\t\tif i % 2 == 0:\n\t\t\t\t\tprint('1 0', end=' ')\n\t\t\t\telse:\n\t\t\t\t\tprint('0 1', end=' ')\n\t\t\t\ti += 1\n\t\t\t\tgroup -= 1\n\t\t\tprint()\n\t\t\tgroup = col // 2\n\t\t\ti = 0\n\t\t\twhile group:\n\t\t\t\tif i % 2 == 0:\n\t\t\t\t\tprint('0 1', end=' ')\n\t\t\t\telse:\n\t\t\t\t\tprint('1 0', end=' ')\n\t\t\t\ti += 1\n\t\t\t\tgroup -= 1\n\t\t\tprint()\n\t\telse:\n\t\t\tgroup = col // 2\n\t\t\ti = 0\n\t\t\twhile group:\n\t\t\t\tif i % 2 == 0:\n\t\t\t\t\tprint('0 1', end=' ')\n\t\t\t\telse:\n\t\t\t\t\tprint('1 0', end=' ')\n\t\t\t\ti += 1\n\t\t\t\tgroup -= 1\n\t\t\tprint()\n\t\t\tgroup = col // 2\n\t\t\ti = 0\n\t\t\twhile group:\n\t\t\t\tif i % 2 == 0:\n\t\t\t\t\tprint('1 0', end=' ')\n\t\t\t\telse:\n\t\t\t\t\tprint('0 1', end=' ')\n\t\t\t\ti += 1\n\t\t\t\tgroup -= 1\n\t\t\tprint()\n",
        "t = int(input().strip())\nfor _ in range(t):\n\t(n, m) = map(int, input().split())\n\thalf_m = m // 2\n\tfor i in range(n):\n\t\tif i % 4 == 0 or i % 4 == 3:\n\t\t\tfor j in range(half_m):\n\t\t\t\tif j % 2:\n\t\t\t\t\tprint('0 1', end=' ')\n\t\t\t\telse:\n\t\t\t\t\tprint('1 0', end=' ')\n\t\telse:\n\t\t\tfor j in range(half_m):\n\t\t\t\tif j % 2:\n\t\t\t\t\tprint('1 0', end=' ')\n\t\t\t\telse:\n\t\t\t\t\tprint('0 1', end=' ')\n\t\tprint('')\n",
        "t = int(input())\nfor x in range(t):\n\t(h, w) = map(int, input().split())\n\tfor a in range(1, h + 1):\n\t\tstr_ = ''\n\t\tfor b in range(1, w + 1):\n\t\t\tstr_ += str(int((a % 4 <= 1) != (b % 4 <= 1))) + ' '\n\t\tprint(str_)\n",
        "t = int(input())\nfor i in range(t):\n\t(n, m) = map(int, input().split())\n\tc1 = 2\n\tfor i in range(n):\n\t\tans = ''\n\t\tif c1 > 2:\n\t\t\tstart = 0\n\t\telse:\n\t\t\tstart = 1\n\t\tc2 = 2\n\t\tfor j in range(m):\n\t\t\tif c2 > 2:\n\t\t\t\tans += str(abs(start - 1))\n\t\t\telse:\n\t\t\t\tans += str(start)\n\t\t\tans += ' '\n\t\t\tc2 += 1\n\t\t\tif c2 > 4:\n\t\t\t\tc2 = 1\n\t\tc1 += 1\n\t\tif c1 > 4:\n\t\t\tc1 = 1\n\t\tprint(ans)\n",
        "t = int(input())\nfor _ in range(t):\n\t(n, m) = map(int, input().split())\n\tfor i in range(1, n + 1):\n\t\tfor j in range(m // 2):\n\t\t\tc = j + i // 2\n\t\t\tif c % 2:\n\t\t\t\tprint('1 0', end=' ')\n\t\t\telse:\n\t\t\t\tprint('0 1', end=' ')\n\t\tprint()\n",
        "import math\n\ndef func():\n\t(n, m) = map(int, input().split())\n\tl1 = [1, 0, 0, 1]\n\tl2 = [0, 1, 1, 0]\n\tl1 *= math.ceil(m / 4)\n\tl2 *= math.ceil(m / 4)\n\tl1 = l1[:m]\n\tl2 = l2[:m]\n\tf = 0\n\tfor i in range(n // 2):\n\t\tif not f:\n\t\t\tprint(*l1)\n\t\t\tprint(*l2)\n\t\t\tf = 1\n\t\telse:\n\t\t\tprint(*l2)\n\t\t\tprint(*l1)\n\t\t\tf = 0\nt = int(input())\nfor _ in range(t):\n\tfunc()\n",
        "t = int(input())\nnm_list = []\nfor i in range(t):\n\tnm_list.append([int(elm) for elm in input().split(' ')])\narray_list = []\nfor nm in nm_list:\n\tx = [[0] * nm[1] for i in range(nm[0])]\n\tc_n = 1\n\tfor i in range(nm[0]):\n\t\tc_m = c_n\n\t\tfor j in range(nm[1]):\n\t\t\tx[i][j] = str(c_m)\n\t\t\tif j % 2 == 0:\n\t\t\t\tc_m = -(c_m - 1)\n\t\tif i % 2 == 0:\n\t\t\tc_n = -(c_n - 1)\n\tarray_list.append(x)\nfor array in array_list:\n\tfor i in range(len(array)):\n\t\tprint(' '.join([str(elm) for elm in array[i]]))\n",
        "testcases = int(input())\nfor i in range(testcases):\n\t(n, m) = map(int, input().split())\n\tli = []\n\ta1 = []\n\ta2 = []\n\tfor k in range(m):\n\t\tif k == 0:\n\t\t\ta1.append(1)\n\t\telif (k + 1) % 4 == 0 or k % 4 == 0:\n\t\t\ta1.append(1)\n\t\telse:\n\t\t\ta1.append(0)\n\tfor s in range(m):\n\t\tif s == 0:\n\t\t\ta2.append(0)\n\t\telif (s + 1) % 4 == 0 or s % 4 == 0:\n\t\t\ta2.append(0)\n\t\telse:\n\t\t\ta2.append(1)\n\tfor p in range(n):\n\t\tif p == 0:\n\t\t\tprint(*a1)\n\t\telif p % 4 == 0 or (p + 1) % 4 == 0:\n\t\t\tprint(*a1)\n\t\telse:\n\t\t\tprint(*a2)\n",
        "n = int(input())\narr = []\nres = []\ntry:\n\twhile n > 0:\n\t\tstring = [int(x) for x in input().split()]\n\t\tif string:\n\t\t\tarr.append(string)\n\t\t\tn -= 1\nexcept Exception:\n\tpass\n\ndef fnc(x):\n\tres = []\n\tfor i in range(x[0]):\n\t\tres.append([])\n\t\tfor j in range(x[1]):\n\t\t\tif i == 0 and j == 0:\n\t\t\t\tres[i].append(1)\n\t\t\telif i == 1 and j == 0:\n\t\t\t\tres[i].append(0)\n\t\t\telif j == 0:\n\t\t\t\tif res[i - 1][0] == 0 and res[i - 2][0] == 1 or (res[i - 1][0] == 1 and res[i - 2][0] == 1):\n\t\t\t\t\tres[i].append(0)\n\t\t\t\telse:\n\t\t\t\t\tres[i].append(1)\n\t\t\telif i == 0 and j == 1:\n\t\t\t\tres[i].append(0)\n\t\t\telif i == 1 and j == 0:\n\t\t\t\tres[i].append(1)\n\t\t\telif res[i][j - 1] == 0 and res[i][j - 2] == 1 or (res[i][j - 1] == 1 and res[i][j - 2] == 1):\n\t\t\t\tres[i].append(0)\n\t\t\telse:\n\t\t\t\tres[i].append(1)\n\treturn res\n\ndef printRes(res):\n\tfor x in range(len(res)):\n\t\tprint(' '.join(list(map(str, res[x]))))\nfor x in range(len(arr)):\n\tprintRes(fnc(arr[x]))\n",
        "for _ in range(int(input())):\n\t(m, n) = map(int, input().split())\n\ta = [1, 0, 0, 1]\n\tb = [0, 1, 1, 0]\n\tk = n // 4\n\tr = n % 4\n\ta = a * k + a[:r]\n\tb = b * k + b[:r]\n\tfor i in range(1, m + 1):\n\t\tif i % 4 == 1 or i % 4 == 0:\n\t\t\tprint(*a)\n\t\telse:\n\t\t\tprint(*b)\n",
        "l = int(input())\nfor i in range(l):\n\t(n, m) = input().split()\n\tn = int(n)\n\tm = int(m)\n\tmtx = [[-1 for i in range(m)] for j in range(n)]\n\tmtx[0][0] = 1\n\tindexA = 0\n\tfor a in range(n - 1):\n\t\tadd = [0, 1]\n\t\tmtx[1 + a][0] = add[indexA % 2]\n\t\tif (a + 1) % 2 == 0:\n\t\t\tindexA += 1\n\tfor c in range(n):\n\t\tindexB = 0\n\t\tfor b in range(m - 1):\n\t\t\tif mtx[c][0] == 1:\n\t\t\t\tadd = [0, 1]\n\t\t\t\tmtx[c][1 + b] = add[indexB % 2]\n\t\t\t\tif (b + 1) % 2 == 0:\n\t\t\t\t\tindexB += 1\n\t\t\telse:\n\t\t\t\tadd = [1, 0]\n\t\t\t\tmtx[c][1 + b] = add[indexB % 2]\n\t\t\t\tif (b + 1) % 2 == 0:\n\t\t\t\t\tindexB += 1\n\t\tindexB = 0\n\tfor k in range(n):\n\t\tresult = ' '.join((str(item) for item in mtx[k]))\n\t\tprint(result)\n",
        "import math\nfor _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tcheck = True\n\tans = []\n\ta1 = []\n\ta2 = []\n\tfor i in range(0, m, 2):\n\t\tif check:\n\t\t\ta1.append(0)\n\t\t\ta1.append(1)\n\t\t\ta2.append(1)\n\t\t\ta2.append(0)\n\t\t\tcheck = False\n\t\telse:\n\t\t\ta1.append(1)\n\t\t\ta1.append(0)\n\t\t\ta2.append(0)\n\t\t\ta2.append(1)\n\t\t\tcheck = True\n\tcheck = True\n\tfor i in range(0, n, 2):\n\t\tif check:\n\t\t\tans.append(a1)\n\t\t\tans.append(a2)\n\t\t\tcheck = False\n\t\telse:\n\t\t\tans.append(a2)\n\t\t\tans.append(a1)\n\t\t\tcheck = True\n\tfor i in ans:\n\t\tprint(*i)\n",
        "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n\t(n, m) = map(int, input().split())\n\tq = m // 4\n\tr = m % 4\n\ts1 = ''\n\tfor j in range(q):\n\t\ts1 += '1001'\n\tif r > 0:\n\t\ts1 += '10'\n\ts0 = ''\n\tfor j in range(q):\n\t\ts0 += '0110'\n\tif r > 0:\n\t\ts0 += '01'\n\tq1 = n // 4\n\tr1 = n % 4\n\tans = []\n\tfor j in range(q1):\n\t\tans.append(s1)\n\t\tans.append(s0)\n\t\tans.append(s0)\n\t\tans.append(s1)\n\tif r1 > 0:\n\t\tans.append(s1)\n\t\tans.append(s0)\n\tfor j in ans:\n\t\tlst = list(j)\n\t\tprint(*lst)\n",
        "def Thing(x):\n\treturn x % 4 in [0, 3]\nfor qwer in range(int(input())):\n\taaa = [int(lskadng) for lskadng in input().split()]\n\tfor i in range(aaa[0]):\n\t\tlol = ''\n\t\tfor j in range(aaa[1]):\n\t\t\tlol += str((Thing(i) + Thing(j)) % 2)\n\t\t\tif j != aaa[1] - 1:\n\t\t\t\tlol += ' '\n\t\tprint(lol)\n",
        "t = int(input())\nfor _ in range(t):\n\t(n, m) = map(int, input().split())\n\ta = [0] * m\n\tflag = False\n\tc = 0\n\tfor i in range(m):\n\t\tif i % 4 == 0 or i % 4 == 3:\n\t\t\ta[i] = 1\n\tb = [0] * m\n\tfor i in range(m):\n\t\tif a[i] == 0:\n\t\t\tb[i] = 1\n\t\telse:\n\t\t\tb[i] = 0\n\tfor j in range(n):\n\t\tif j % 4 == 0 or j % 4 == 3:\n\t\t\tprint(*a)\n\t\telse:\n\t\t\tprint(*b)\n",
        "t = int(input())\nfor _ in range(0, t):\n\tinputs = [int(num) for num in input().split()]\n\tn = inputs[0]\n\tm = inputs[1]\n\trow1 = [1]\n\tk = 0\n\tfor i in range(0, (m - 2) // 2):\n\t\tif i % 2 == 0:\n\t\t\trow1.append(0)\n\t\t\trow1.append(0)\n\t\t\tk = 1\n\t\telse:\n\t\t\trow1.append(1)\n\t\t\trow1.append(1)\n\t\t\tk = 0\n\tif k == 0:\n\t\trow1.append(0)\n\telse:\n\t\trow1.append(1)\n\trow2 = [0]\n\tk = 0\n\tfor i in range(0, (m - 2) // 2):\n\t\tif i % 2 == 0:\n\t\t\trow2.append(1)\n\t\t\trow2.append(1)\n\t\t\tk = 1\n\t\telse:\n\t\t\trow2.append(0)\n\t\t\trow2.append(0)\n\t\t\tk = 0\n\tif k == 0:\n\t\trow2.append(1)\n\telse:\n\t\trow2.append(0)\n\tprint(*row1)\n\tk = 0\n\tfor i in range(0, (n - 2) // 2):\n\t\tif i % 2 == 0:\n\t\t\tprint(*row2)\n\t\t\tprint(*row2)\n\t\t\tk = 1\n\t\telse:\n\t\t\tprint(*row1)\n\t\t\tprint(*row1)\n\t\t\tk = 0\n\tif k == 0:\n\t\tprint(*row2)\n\telse:\n\t\tprint(*row1)\n",
        "tc = int(input())\nfor i in range(tc):\n\t(nt, mt) = map(int, input().split())\n\top = []\n\tstr_a = '10'\n\tstr_b = '01'\n\tstr_1 = ''\n\tstr_2 = ''\n\tfor j in range(mt // 2):\n\t\tif j % 2 != 0:\n\t\t\tstr_2 += str_a\n\t\t\tstr_1 += str_b\n\t\telse:\n\t\t\tstr_1 += str_a\n\t\t\tstr_2 += str_b\n\tfor g in range(nt):\n\t\tif g % 4 == 0 or g % 4 == 3:\n\t\t\top.append(list(str_1))\n\t\telse:\n\t\t\top.append(list(str_2))\n\tfor h in range(len(op)):\n\t\tprint(*op[h])\n",
        "for s in [*open(0)][1:]:\n\t(n, m) = map(int, s.split())\n\tfor r in (([([0, 0, 1, 1] * m)[1:m + 1]] * 2 + [([1, 1, 0, 0] * m)[1:m + 1]] * 2) * n)[1:n + 1]:\n\t\tprint(*r)\n",
        "for _ in range(int(input())):\n\t(n, k) = map(int, input().split())\n\toutput_arr = []\n\ta = '10'\n\tb = '01'\n\tstring = ''\n\tstring2 = ''\n\tfor i in range(k // 2):\n\t\tif i % 2 == 0:\n\t\t\tstring += a\n\t\t\tstring2 += b\n\t\telse:\n\t\t\tstring += b\n\t\t\tstring2 += a\n\tfor i in range(n):\n\t\tif i % 4 == 0 or i % 4 == 3:\n\t\t\toutput_arr.append(list(string))\n\t\telse:\n\t\t\toutput_arr.append(list(string2))\n\tfor i in range(len(output_arr)):\n\t\tprint(*output_arr[i])\n",
        "t = int(input())\nfor _ in range(t):\n\t(n, m) = map(int, input().split())\n\tL = [1]\n\tM = [0]\n\tfor i in range(1, m):\n\t\tif i % 4 == 1 or i % 4 == 2:\n\t\t\tL.append(0)\n\t\t\tM.append(1)\n\t\telse:\n\t\t\tL.append(1)\n\t\t\tM.append(0)\n\tfor i in range(n):\n\t\tif i % 4 == 0 or i % 4 == 3:\n\t\t\tprint(*L)\n\t\telse:\n\t\t\tprint(*M)\n",
        "for _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\trow = [0] * m\n\tfor i in range(m):\n\t\tif i % 4 == 0 or i % 4 == 3:\n\t\t\trow[i] = 1\n\trow2 = [int(not i) for i in row]\n\tfor i in range(n):\n\t\tif i % 4 == 0 or i % 4 == 3:\n\t\t\tprint(*row)\n\t\telse:\n\t\t\tprint(*row2)\n",
        "first = [0, 1, 1, 0] * 15\nsecond = [1, 0, 0, 1] * 15\nfinal = [first, second, second, first] * 15\nfor _ in range(int(input())):\n\t(row, col) = map(int, input().split())\n\tfor i in range(row):\n\t\tprint(*final[i][:col])\n",
        "def ss(n, m):\n\tlst = []\n\ta = [1, 0, 0, 1] * (m // 4) + [1, 0] * (m % 4 - 1)\n\tb = [0, 1, 1, 0] * (m // 4) + [0, 1] * (m % 4 - 1)\n\tfor i in range(n // 2):\n\t\tif i % 2 == 0:\n\t\t\tlst.append(a)\n\t\t\tlst.append(b)\n\t\telse:\n\t\t\tlst.append(b)\n\t\t\tlst.append(a)\n\treturn lst\nfor _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tlst = ss(n, m)\n\tfor i in lst:\n\t\tprint(*i)\n",
        "def solve():\n\t(n, m) = map(int, input().split())\n\tres = ['' for _ in range(n)]\n\tm //= 2\n\tn //= 2\n\tb = True\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif b:\n\t\t\t\tres[i * 2] += '10'\n\t\t\t\tres[i * 2 + 1] += '01'\n\t\t\telse:\n\t\t\t\tres[i * 2] += '01'\n\t\t\t\tres[i * 2 + 1] += '10'\n\t\t\tb = not b\n\t\tif res[i * 2][0] == '1':\n\t\t\tb = False\n\t\telse:\n\t\t\tb = True\n\tfor i in res:\n\t\tprint(*list(i))\n\treturn\n\ndef main():\n\tfor _ in range(int(input())):\n\t\tsolve()\n\treturn\nmain()\n",
        "for _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tif n == 2 and m == 2:\n\t\tprint(1, 0)\n\t\tprint(0, 1)\n\t\tcontinue\n\ta = []\n\tb = [1, 0]\n\tc = [0, 1]\n\tt = 1\n\td = []\n\tfor j in range(m // 2):\n\t\tif t == 1:\n\t\t\td += b\n\t\telse:\n\t\t\td += c\n\t\tt = t ^ 1\n\ta += [d]\n\tfor i in range(1, n):\n\t\tif i % 2 == 1:\n\t\t\tt = a[i - 1][0] ^ 1\n\t\telif i % 2 == 0:\n\t\t\tt = a[i - 1][0]\n\t\td = []\n\t\tfor j in range(m // 2):\n\t\t\tif t == 1:\n\t\t\t\td += b\n\t\t\telse:\n\t\t\t\td += c\n\t\t\tt = t ^ 1\n\t\ta += [d]\n\tfor i in a:\n\t\tprint(*i)\n",
        "for _ in range(int(input())):\n\t(n, m) = [int(y) for y in input().split()]\n\tchng = 1\n\tinp = 1\n\ttmp1 = []\n\ttmp2 = []\n\tfor i in range(m):\n\t\tif chng == 2:\n\t\t\tinp ^= 1\n\t\t\tchng = 0\n\t\ttmp1.append(inp)\n\t\ttmp2.append(inp ^ 1)\n\t\tchng += 1\n\tflag = True\n\ta = []\n\tfor i in range(int(n // 2)):\n\t\tif flag:\n\t\t\ta.append(tmp1)\n\t\t\ta.append(tmp2)\n\t\t\tflag = False\n\t\telse:\n\t\t\ta.append(tmp2)\n\t\t\ta.append(tmp1)\n\t\t\tflag = True\n\tfor i in range(n):\n\t\tprint(*a[i])\n",
        "for _ in range(int(input())):\n\ta = [1, 0, 0, 1] * 13\n\tb = [0, 1, 1, 0] * 13\n\t(m, n) = list(map(int, input().split()))\n\tfor i in range(m):\n\t\tif i % 4 == 0:\n\t\t\tprint(*b[:n])\n\t\telif i % 4 == 1:\n\t\t\tprint(*a[:n])\n\t\telif i % 4 == 2:\n\t\t\tprint(*a[:n])\n\t\telif i % 4 == 3:\n\t\t\tprint(*b[:n])\n",
        "test = int(input())\nwhile test:\n\t(n, m) = map(int, input().split())\n\trow = [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1]\n\torder = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]\n\tsame = row[:m]\n\trev = []\n\tfor i in same:\n\t\tif i == 0:\n\t\t\trev.append(1)\n\t\telse:\n\t\t\trev.append(0)\n\tprint(*same)\n\tfor i in range(n - 2):\n\t\tif order[i]:\n\t\t\tprint(*same)\n\t\telse:\n\t\t\tprint(*rev)\n\tif n // 2 % 2 == 0:\n\t\tprint(*same)\n\telse:\n\t\tprint(*rev)\n\ttest -= 1\n",
        "def main():\n\tt = int(input())\n\tfor _ in range(t):\n\t\t(n, m) = map(int, input().split())\n\t\tfield = [[0] * m for _ in range(n)]\n\t\tfor i in range(n):\n\t\t\tfor j in range(m):\n\t\t\t\tif i % 4 == 0 or i % 4 == 3:\n\t\t\t\t\tif j % 4 == 1 or j % 4 == 2:\n\t\t\t\t\t\tfield[i][j] = 1\n\t\t\t\telif j % 4 == 0 or j % 4 == 3:\n\t\t\t\t\tfield[i][j] = 1\n\t\tfor f in field:\n\t\t\tprint(*f)\nmain()\n",
        "def solve(n, m):\n\tl = [[0] * m for k in range(n)]\n\tfor i in range(n):\n\t\tif (i + 1) % 4 == 0 or (i + 1) % 4 == 1:\n\t\t\tfor j in range(m):\n\t\t\t\tif (j + 1) % 4 == 0 or (j + 1) % 4 == 1:\n\t\t\t\t\tl[i][j] = 1\n\t\t\t\telse:\n\t\t\t\t\tl[i][j] = 0\n\t\telse:\n\t\t\tfor j in range(m):\n\t\t\t\tif (j + 1) % 4 == 0 or (j + 1) % 4 == 1:\n\t\t\t\t\tl[i][j] = 0\n\t\t\t\telse:\n\t\t\t\t\tl[i][j] = 1\n\treturn l\nt = int(input())\nfor _ in range(t):\n\t(n, m) = map(int, input().split())\n\tfinal = solve(n, m)\n\tfor i in final:\n\t\tprint(*i)\n",
        "def soln():\n\t(x, y) = map(int, input().split())\n\tans = []\n\tl1 = [1, 0, 0, 1]\n\tl2 = [0, 1, 1, 0]\n\tif y % 4 == 2:\n\t\tval1 = [1, 0, 0, 1] * (y // 4) + l1[:2]\n\t\tval2 = [0, 1, 1, 0] * (y // 4) + l2[:2]\n\telse:\n\t\tval1 = [1, 0, 0, 1] * (y // 4)\n\t\tval2 = [0, 1, 1, 0] * (y // 4)\n\tans = []\n\tcnt = 1\n\tfor i in range(x // 2):\n\t\tif cnt == 1:\n\t\t\tans.append(val1)\n\t\t\tans.append(val2)\n\t\t\tcnt = 0\n\t\telse:\n\t\t\tans.append(val2)\n\t\t\tans.append(val1)\n\t\t\tcnt = 1\n\tfor i in ans:\n\t\tprint(*i)\nt = int(input())\nfor _ in range(0, t):\n\tsoln()\n",
        "for _ in range(int(input())):\n\t(n, m) = [int(x) for x in input().split()]\n\tans = [[], []]\n\tflag = 0\n\tfor i in range(m // 2):\n\t\tif flag == 0:\n\t\t\tans[0].append(1)\n\t\t\tans[0].append(0)\n\t\t\tflag = 1\n\t\telse:\n\t\t\tans[0].append(0)\n\t\t\tans[0].append(1)\n\t\t\tflag = 0\n\tflag = 0\n\tfor i in range(m // 2):\n\t\tif flag == 1:\n\t\t\tans[1].append(1)\n\t\t\tans[1].append(0)\n\t\t\tflag = 0\n\t\telse:\n\t\t\tans[1].append(0)\n\t\t\tans[1].append(1)\n\t\t\tflag = 1\n\tp = []\n\tflag = 0\n\tfor i in range(n // 2):\n\t\tif flag == 0:\n\t\t\tp.append(ans[0])\n\t\t\tp.append(ans[1])\n\t\t\tflag = 1\n\t\telse:\n\t\t\tp.append(ans[1])\n\t\t\tp.append(ans[0])\n\t\t\tflag = 0\n\tfor i in range(n):\n\t\tprint(*p[i])\n",
        "for s in [*open(0)][1:]:\n\t(n, m) = map(int, s.split())\n\tprint(*((i ^ j) % 4 // 2 for i in range(1, n + 1) for j in range(1, m + 1)))\n"
    ],
    "starter_code": "",
    "input_output": "{\"inputs\": [\"3\\n2 4\\n2 2\\n4 4\\n\", \"1\\n2 8\\n\", \"1\\n4 10\\n\", \"3\\n2 2\\n2 4\\n2 10\\n\", \"1\\n12 12\\n\", \"3\\n2 6\\n4 8\\n6 10\\n\", \"1\\n16 16\\n\", \"2\\n4 4\\n8 6\\n\", \"2\\n6 4\\n10 8\\n\", \"1\\n24 24\\n\", \"3\\n8 16\\n12 12\\n16 8\\n\", \"2\\n10 4\\n14 14\\n\", \"1\\n28 28\\n\", \"4\\n14 8\\n16 20\\n8 20\\n18 16\\n\", \"2\\n24 10\\n20 12\\n\", \"1\\n10 2\\n\", \"1\\n2 10\\n\", \"2\\n6 6\\n10 10\\n\", \"2\\n2 4\\n4 6\\n\", \"2\\n4 4\\n6 6\\n\", \"4\\n2 4\\n2 2\\n4 4\\n4 4\\n\", \"2\\n10 10\\n10 10\\n\", \"2\\n6 6\\n6 6\\n\", \"2\\n2 8\\n2 4\\n\", \"3\\n2 10\\n4 6\\n2 6\\n\", \"2\\n8 8\\n4 4\\n\", \"2\\n2 12\\n2 14\\n\", \"3\\n4 8\\n8 8\\n6 6\\n\", \"1\\n14 14\\n\", \"3\\n2 16\\n4 10\\n6 8\\n\", \"2\\n6 14\\n8 10\\n\", \"2\\n8 14\\n10 10\\n\", \"1\\n18 18\\n\", \"2\\n10 12\\n12 12\\n\", \"3\\n12 14\\n14 14\\n16 16\\n\", \"3\\n3 3\\n5 5\\n7 7\\n\", \"3\\n4 2\\n6 4\\n8 6\\n\", \"2\\n10 10\\n20 20\\n\", \"3\\n4 4\\n8 8\\n16 16\\n\", \"1\\n20 10\\n\", \"2\\n10 20\\n30 40\\n\", \"3\\n22 22\\n33 33\\n44 44\\n\", \"4\\n12 12\\n24 24\\n36 36\\n48 48\\n\", \"1\\n50 6\\n\", \"2\\n50 10\\n50 20\\n\", \"5\\n4 4\\n2 2\\n2 4\\n4 2\\n6 6\\n\", \"2\\n4 6\\n6 4\\n\", \"3\\n2 2\\n4 4\\n8 8\\n\", \"4\\n2 4\\n2 8\\n4 4\\n4 8\\n\", \"3\\n6 6\\n8 8\\n10 10\\n\", \"2\\n10 10\\n12 12\\n\", \"4\\n2 2\\n2 6\\n6 2\\n6 6\\n\", \"3\\n8 8\\n2 2\\n4 4\\n\", \"3\\n2 4\\n2 2\\n4 4\\n\", \"1\\n2 6\\n\", \"2\\n6 2\\n4 2\\n\", \"3\\n4 2\\n2 6\\n4 4\\n\", \"5\\n2 2\\n2 4\\n4 4\\n6 6\\n8 8\\n\", \"1\\n4 4\\n\", \"2\\n8 2\\n8 8\\n\", \"3\\n10 10\\n8 2\\n4 2\\n\", \"3\\n8 4\\n10 4\\n8 2\\n\", \"1\\n8 6\\n\", \"4\\n8 2\\n6 6\\n4 4\\n2 4\\n\", \"5\\n8 2\\n4 2\\n2 6\\n8 8\\n6 6\\n\", \"1\\n2 4\\n\", \"3\\n6 2\\n10 2\\n8 8\\n\", \"2\\n10 2\\n4 4\\n\", \"3\\n10 4\\n10 2\\n10 10\\n\", \"1\\n6 4\\n\", \"2\\n2 4\\n4 2\\n\", \"1\\n6 2\\n\", \"1\\n2 2\\n\", \"1\\n8 2\\n\", \"3\\n4 2\\n6 6\\n2 6\\n\", \"2\\n6 2\\n6 6\\n\", \"3\\n2 4\\n2 6\\n4 4\\n\", \"5\\n2 8\\n2 2\\n4 6\\n3 3\\n4 8\\n\", \"2\\n4 6\\n4 8\\n\", \"1\\n6 6\\n\", \"4\\n2 2\\n4 4\\n4 6\\n6 6\\n\", \"3\\n2 6\\n4 6\\n6 6\\n\", \"2\\n2 4\\n4 4\\n\", \"3\\n2 6\\n3 3\\n4 8\\n\", \"5\\n2 4\\n2 2\\n4 4\\n2 2\\n4 4\\n\", \"2\\n4 4\\n2 2\\n\", \"2\\n4 4\\n2 4\\n\", \"4\\n2 2\\n2 2\\n2 2\\n2 2\\n\", \"3\\n2 4\\n4 4\\n2 2\\n\", \"2\\n2 2\\n2 2\\n\", \"5\\n2 4\\n2 2\\n2 2\\n4 4\\n4 4\\n\", \"3\\n2 4\\n2 2\\n2 2\\n\", \"3\\n4 4\\n4 4\\n4 4\\n\", \"4\\n4 4\\n4 4\\n4 4\\n4 4\\n\", \"3\\n2 2\\n2 2\\n2 2\\n\", \"3\\n4 4\\n2 4\\n4 4\\n\", \"5\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n\", \"2\\n4 4\\n4 4\\n\", \"2\\n2 4\\n2 4\\n\", \"2\\n2 2\\n4 4\\n\", \"5\\n2 2\\n4 4\\n8 8\\n6 6\\n2 10\\n\", \"1\\n30 30\\n\", \"3\\n6 14\\n10 12\\n12 2\\n\", \"4\\n8 8\\n2 16\\n20 2\\n2 18\\n\", \"2\\n22 22\\n14 12\\n\", \"5\\n2 2\\n4 4\\n6 6\\n8 8\\n10 10\\n\", \"2\\n14 14\\n10 18\\n\", \"1\\n20 24\\n\", \"3\\n2 2\\n2 4\\n4 4\\n\", \"3\\n4 4\\n2 2\\n2 4\\n\", \"2\\n2 2\\n2 4\\n\", \"4\\n2 4\\n2 2\\n2 4\\n2 2\\n\", \"4\\n4 4\\n2 4\\n4 4\\n2 4\\n\", \"2\\n2 4\\n2 2\\n\", \"3\\n2 2\\n4 4\\n2 4\\n\", \"4\\n2 4\\n4 4\\n2 2\\n4 4\\n\", \"5\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n\", \"5\\n2 2\\n2 4\\n4 4\\n2 2\\n2 4\\n\", \"4\\n2 4\\n2 6\\n4 4\\n6 6\\n\", \"1\\n50 50\\n\", \"3\\n2 4\\n4 6\\n8 8\\n\", \"6\\n10 20\\n2 2\\n6 2\\n4 4\\n8 12\\n14 14\\n\", \"7\\n2 4\\n4 4\\n30 30\\n40 40\\n2 4\\n4 6\\n10 10\\n\", \"3\\n16 16\\n16 20\\n24 24\\n\", \"2\\n2 6\\n4 2\\n\", \"2\\n6 2\\n2 8\\n\", \"3\\n2 10\\n4 2\\n6 6\\n\", \"3\\n50 50\\n2 50\\n50 2\\n\", \"4\\n10 2\\n8 4\\n6 8\\n4 10\\n\", \"1\\n10 10\\n\", \"2\\n12 2\\n2 10\\n\", \"1\\n20 20\\n\", \"2\\n20 10\\n10 20\\n\", \"3\\n48 48\\n42 8\\n6 44\\n\", \"1\\n50 10\\n\", \"2\\n10 50\\n50 50\\n\", \"4\\n50 50\\n40 20\\n30 30\\n20 40\\n\", \"1\\n6 8\\n\", \"3\\n4 4\\n10 10\\n2 2\\n\", \"5\\n4 4\\n2 2\\n4 4\\n8 8\\n10 10\\n\", \"2\\n6 6\\n4 4\\n\", \"4\\n4 4\\n2 2\\n10 10\\n2 2\\n\", \"1\\n4 6\\n\", \"1\\n8 8\\n\", \"2\\n4 6\\n6 8\\n\", \"3\\n8 10\\n6 8\\n4 4\\n\", \"5\\n4 4\\n2 2\\n4 4\\n2 4\\n4 6\\n\", \"4\\n8 8\\n2 2\\n10 10\\n2 2\\n\", \"3\\n4 6\\n2 4\\n4 4\\n\", \"3\\n2 4\\n4 4\\n4 2\\n\", \"3\\n2 4\\n2 2\\n4 2\\n\", \"2\\n2 2\\n4 2\\n\", \"1\\n4 2\\n\", \"2\\n4 2\\n2 4\\n\", \"4\\n2 2\\n4 2\\n2 4\\n4 4\\n\", \"4\\n4 4\\n4 4\\n4 6\\n6 6\\n\", \"3\\n4 4\\n2 6\\n4 2\\n\", \"3\\n2 2\\n4 4\\n6 6\\n\", \"3\\n2 4\\n2 6\\n4 6\\n\", \"2\\n2 2\\n2 6\\n\", \"3\\n2 4\\n4 6\\n4 2\\n\", \"2\\n4 6\\n8 8\\n\", \"5\\n2 2\\n2 4\\n4 2\\n4 4\\n6 6\\n\", \"3\\n10 10\\n12 12\\n14 14\\n\", \"3\\n2 8\\n4 8\\n6 8\\n\", \"3\\n2 20\\n4 20\\n6 20\\n\", \"3\\n10 20\\n12 20\\n14 20\\n\", \"3\\n20 30\\n22 30\\n24 30\\n\", \"3\\n20 40\\n22 40\\n24 40\\n\", \"4\\n24 48\\n26 48\\n28 48\\n30 48\\n\", \"3\\n26 52\\n28 52\\n30 52\\n\", \"3\\n28 56\\n30 56\\n32 56\\n\", \"3\\n30 60\\n32 60\\n34 60\\n\", \"3\\n32 64\\n34 64\\n36 64\\n\", \"3\\n34 68\\n36 68\\n38 68\\n\", \"2\\n36 72\\n38 72\\n\", \"1\\n38 74\\n\", \"1\\n40 76\\n\", \"3\\n40 80\\n42 80\\n44 80\\n\", \"2\\n42 84\\n44 84\\n\", \"1\\n44 88\\n\", \"5\\n40 80\\n42 80\\n44 80\\n46 80\\n48 80\\n\", \"1\\n46 90\\n\", \"1\\n48 94\\n\", \"2\\n48 98\\n50 98\\n\", \"2\\n46 94\\n48 94\\n\", \"3\\n46 92\\n48 92\\n50 92\\n\", \"3\\n2 48\\n4 48\\n6 48\\n\", \"3\\n3 4\\n4 4\\n2 2\\n\", \"4\\n2 2\\n2 4\\n4 4\\n4 2\\n\", \"5\\n2 2\\n2 4\\n3 4\\n4 4\\n4 2\\n\", \"1\\n3 4\\n\", \"2\\n4 2\\n4 4\\n\", \"3\\n3 4\\n4 2\\n4 4\\n\", \"4\\n3 4\\n4 2\\n4 4\\n2 2\\n\", \"5\\n3 4\\n4 2\\n4 4\\n2 2\\n2 4\\n\", \"3\\n2 2\\n2 4\\n3 4\\n\", \"2\\n2 2\\n3 4\\n\", \"3\\n2 2\\n3 4\\n4 4\\n\", \"2\\n4 4\\n4 2\\n\", \"2\\n4 6\\n2 8\\n\", \"2\\n4 10\\n2 2\\n\", \"3\\n2 10\\n2 8\\n4 12\\n\", \"3\\n2 4\\n4 12\\n2 10\\n\", \"4\\n4 16\\n4 4\\n2 16\\n2 20\\n\", \"5\\n2 10\\n4 12\\n2 4\\n4 18\\n4 6\\n\", \"5\\n2 16\\n4 4\\n2 16\\n2 14\\n4 10\\n\", \"4\\n4 4\\n2 2\\n2 4\\n4 2\\n\", \"3\\n2 4\\n4 4\\n6 6\\n\", \"3\\n4 4\\n6 6\\n8 8\\n\", \"5\\n2 2\\n4 4\\n6 6\\n8 8\\n2 2\\n\", \"5\\n2 4\\n4 2\\n6 4\\n4 6\\n2 2\\n\", \"2\\n6 6\\n6 6\\n\", \"3\\n2 4\\n4 6\\n2 2\\n\", \"4\\n4 4\\n6 6\\n8 8\\n6 4\\n\", \"7\\n2 2\\n4 4\\n6 2\\n2 6\\n6 6\\n8 8\\n2 2\\n\", \"6\\n4 4\\n8 8\\n2 2\\n4 4\\n4 4\\n4 4\\n\"], \"outputs\": [\"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\", \"0 1 1 0\\n1 0 0 1\\n0 1\\n1 0\\n0 1 1 0\\n1 0 0 1\\n1 0 0 1\\n0 1 1 0\\n\"]}",
    "difficulty": "EASY",
    "raw_tags": "['bitmasks', 'matrices', 'constructive algorithms']",
    "name": null,
    "source": "codeforces",
    "tags": "['Matrices', 'Bit manipulation', 'Constructive algorithms']",
    "skill_types": "['Bit manipulation']",
    "url": "https://codeforces.com/problemset/problem/1699/B",
    "Expected Auxiliary Space": null,
    "time_limit": "1 second",
    "date": "2022-07-04",
    "picture_num": "3",
    "memory_limit": "256 megabytes",
    "Expected Time Complexity": null
}